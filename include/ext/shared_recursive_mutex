/**
 * @file shared_recursive_mutex
 * @author Jung-kang Lee (ntoskrnl7@gmail.com)
 * @brief This module implements shared recursive mutex class.
 *
 * @copyright Copyright (c) 2020 C++ Extended template library Authors
 *
 */
#pragma once

#if CXX_USE_BOOST
#define CXX_USE_STD_THREAD
#include <boost/thread.hpp>

#define CXX_USE_STD_SHARED_MUTEX
#include <boost/thread/shared_mutex.hpp>

#define CXX_USE_STD_ATOMIC
#include <boost/atomic.hpp>

#define CXX_USE_STD_UNORDERED_MAP
#include <boost/unordered/unordered_map.hpp>

#define CXX_USE_NULLPTR
#define CXX_USE_STD_SYSTEM_ERROR
#include <boost/system/system_error.hpp>
#endif

#include "stl_compat"

#if !defined(_EXT_STD_MUTEX_) && !defined(CXX_STD_MUTEX_NOT_SUPPORTED)
#include <mutex>
#endif

#if ((!defined(CXX_STD_ATOMIC_NOT_SUPPORTED)) || defined(_EXT_STD_ATOMIC_)) && \
    (((!defined(CXX_STD_SHARED_MUTEX_NOT_SUPPORTED)) ||                        \
      !defined(CXX_STD_SHARED_TIMED_MUTEX_NOT_SUPPORTED)) ||                   \
     defined(_EXT_STD_SHARED_MUTEX_)) &&                                       \
    ((!defined(CXX_STD_THREAD_NOT_SUPPORTED)) || defined(_EXT_STD_THREAD_))

#ifndef _EXT_SHARED_RECURSIVE_MUTEX_
#define _EXT_SHARED_RECURSIVE_MUTEX_

#if !defined(_EXT_STD_THREAD_) && !defined(CXX_STD_THREAD_NOT_SUPPORTED)
#include <thread>
#endif

#if !defined(CXX_STD_SHARED_TIMED_MUTEX_NOT_SUPPORTED) ||                      \
    !defined(CXX_STD_SHARED_MUTEX_NOT_SUPPORTED)
#include <shared_mutex>
#endif

#if !defined(_EXT_STD_ATOMIC_) && !defined(CXX_STD_ATOMIC_NOT_SUPPORTED)
#include <atomic>
#endif

#if !defined(_EXT_STD_UNORDERED_MAP_)
#include <unordered_map>
#endif

#include "stl_compat"

#include <system_error>

namespace ext {
/**
 * @brief The shared_recursive_mutex class
 */
class shared_recursive_mutex : public CXX_SHARED_MUTEX {
private:
  typedef std::unordered_map<std::thread::id, unsigned long> thread_map;

public:
  void lock(void) {
    const std::thread::id thread_id = std::this_thread::get_id();
    if (owner_ == thread_id) {
      ++lock_count_;
    } else {
      // When an exclusive lock is in progress by the current thread,
      // if the shared lock is already locked, unlock the share and perform an
      // exclusive lock.
      if (owner_ == std::thread::id()) {
        bool need_to_unlock_shared = false;
        {
          std::shared_lock<CXX_SHARED_MUTEX> lock(shared_lock_count_map_mutex_);
          thread_map::iterator iter = shared_lock_count_map_.find(thread_id);
          if (iter != shared_lock_count_map_.end()) {
            iter->second = 1; // Set only one shared lock to remain unlocked
                              // when the unlock_shared method is called.
            need_to_unlock_shared = true;
          }
        }
        if (need_to_unlock_shared)
          unlock_shared();
      }

      CXX_SHARED_MUTEX::lock();
      owner_ = thread_id;
      lock_count_ = 1;
    }
  }

  void unlock(void) {
    const std::thread::id thread_id = std::this_thread::get_id();
    if (owner_ != thread_id)
      throw std::system_error(std::error_code(ENOLCK, std::system_category()));

    if (--lock_count_ == 0) {
      owner_ = std::thread::id();
      CXX_SHARED_MUTEX::unlock();
    }
  }

  void lock_shared(void) {
    const std::thread::id thread_id = std::this_thread::get_id();
    bool need_to_lock = false;
    {
      std::unique_lock<CXX_SHARED_MUTEX> lock(shared_lock_count_map_mutex_);
      thread_map::iterator iter = shared_lock_count_map_.find(thread_id);
      if (iter == shared_lock_count_map_.end()) {
        shared_lock_count_map_.insert(
            std::pair<std::thread::id, unsigned long>(thread_id, 1));
        need_to_lock = true;
      } else {
        ++iter->second;
      }
    }
    if (need_to_lock) {
      // If the current thread already has an exclusive lock, do not use a
      // shared lock. (Even if there is an exclusive lock, the shared lock count
      // will increase, so I handled it this way.)
      if (owner_ != thread_id)
        CXX_SHARED_MUTEX::lock_shared();
    }
  }

  void unlock_shared(void) {
    const std::thread::id thread_id = std::this_thread::get_id();

    // If the shared lock is already unlocked because it has been switched to a
    // shared lock, it is handled not to unlock it.
    bool need_to_unlock = false;
    {
      std::unique_lock<CXX_SHARED_MUTEX> lock(shared_lock_count_map_mutex_);
      thread_map::iterator iter = shared_lock_count_map_.find(thread_id);
      if (iter != shared_lock_count_map_.end()) {
        if (--iter->second == 0) {
          shared_lock_count_map_.erase(iter);
          need_to_unlock = true;
        }
      }
    }

    if (need_to_unlock) {
      // If the current thread is exclusively locked, do not release the shared
      // lock as it has not been held.
      if (owner_ != thread_id)
        CXX_SHARED_MUTEX::unlock_shared();
    }
  }

  bool locked() const {
    const std::thread::id thread_id = std::this_thread::get_id();
    if (owner_ == thread_id)
      return true;
    std::unique_lock<CXX_SHARED_MUTEX> lock(shared_lock_count_map_mutex_);
    thread_map::iterator iter = shared_lock_count_map_.find(thread_id);
    return iter != shared_lock_count_map_.end();
  }

private:
  std::atomic<std::thread::id> owner_;
  std::atomic<unsigned long> lock_count_;

  mutable CXX_SHARED_MUTEX shared_lock_count_map_mutex_;
  mutable thread_map shared_lock_count_map_;
};
} // namespace ext

#endif // _EXT_SHARED_RECURSIVE_MUTEX_
#endif
