/**
 * @file lang
 * @author Jung-kang Lee (ntoskrnl7@gmail.com)
 * @brief This module implements language helper features.
 *
 * @copyright Copyright (c) 2020 C++ Extended template library Authors
 *
 */

#pragma once

#ifndef _EXT_LANG_
#define _EXT_LANG_

#define CXX_USE_STD_CSTDINT
#include "stl_compat"

#include "string"

namespace ext {
namespace lang {
namespace ko_kr {
namespace numeric {
namespace internal {
namespace constants {

template <typename T> const T *empty();
template <> const char *empty<char>() { return ""; }
template <> const wchar_t *empty<wchar_t>() { return L""; }

template <typename T> struct nominal;
template <> struct nominal<char> {
  static const char *zero() { return "영"; }
  static const char *less_than_ten(uint64_t number, const char *zero) {
    const char *str[] = {zero, "일", "이", "삼", "사",
                         "오", "육", "칠", "팔", "구"};
    return str[number];
  }
  static const char *ten() { return "십"; }
  static const char *hundred() { return "백"; }
  static const char *thousand() { return "천"; }
  static const char *ten_thousand() { return "만"; }
  static const char *million() { return "억"; }
  static const char *trillion() { return "조"; }
  static const char *ten_quadrillion() { return "경"; }
};
template <> struct nominal<wchar_t> {
  static const wchar_t *zero() { return L"영"; }
  static const wchar_t *less_than_ten(uint64_t number, const wchar_t *zero) {
    const wchar_t *str[] = {zero,  L"일", L"이", L"삼", L"사",
                            L"오", L"육", L"칠", L"팔", L"구"};
    return str[number];
  }
  static const wchar_t *ten() { return L"십"; }
  static const wchar_t *hundred() { return L"백"; }
  static const wchar_t *thousand() { return L"천"; }
  static const wchar_t *ten_thousand() { return L"만"; }
  static const wchar_t *million() { return L"억"; }
  static const wchar_t *trillion() { return L"조"; }
  static const wchar_t *ten_quadrillion() { return L"경"; }
};

template <typename T> struct ordinal;
template <> struct ordinal<char> {
  static const char *default_unit() { return "째"; }
  static const char *default_first() { return "첫"; }
  static const char *first() { return "한"; }
  static const char *ten() { return "열"; }
  static const char *twenty() { return "스무"; }
  static const char *twenty_later() { return "스물"; }
  static const char *thirty() { return "서른"; }
  static const char *forty() { return "마흔"; }
  static const char *fifty() { return "쉰"; }
  static const char *sixty() { return "예순"; }
  static const char *seventy() { return "일흔"; }
  static const char *eighty() { return "여든"; }
  static const char *ninety() { return "아흔"; }
  static const char *hundred() { return "백"; }
  static const char *thousand() { return "천"; }
  static const char *ten_thousand() { return "만"; }
  static const char *million() { return "억"; }
  static const char *trillion() { return "조"; }
  static const char *ten_quadrillion() { return "경"; }
  static const std::string less_than_ten(uint64_t number, const char *unit,
                                         const char *first) {
    if (unit[0] == default_unit()[0]) {
      const std::string str[] = {"",     first,  "둘",   "셋",   "넷",
                                 "다섯", "여섯", "일곱", "여덟", "아홉"};
      return str[number] + unit;
    }
    const std::string str[] = {"",     first,  "두",   "세",   "네",
                               "다섯", "여섯", "일곱", "여덟", "아홉"};
    return str[number] + unit;
  }
};
template <> struct ordinal<wchar_t> {
  static const wchar_t *default_unit() { return L"째"; }
  static const wchar_t *default_first() { return L"첫"; }
  static const wchar_t *first() { return L"한"; }
  static const wchar_t *ten() { return L"열"; }
  static const wchar_t *twenty() { return L"스무"; }
  static const wchar_t *twenty_later() { return L"스물"; }
  static const wchar_t *thirty() { return L"서른"; }
  static const wchar_t *forty() { return L"마흔"; }
  static const wchar_t *fifty() { return L"쉰"; }
  static const wchar_t *sixty() { return L"예순"; }
  static const wchar_t *seventy() { return L"일흔"; }
  static const wchar_t *eighty() { return L"여든"; }
  static const wchar_t *ninety() { return L"아흔"; }
  static const wchar_t *hundred() { return L"백"; }
  static const wchar_t *thousand() { return L"천"; }
  static const wchar_t *ten_thousand() { return L"만"; }
  static const wchar_t *million() { return L"억"; }
  static const wchar_t *trillion() { return L"조"; }
  static const wchar_t *ten_quadrillion() { return L"경"; }
  static const std::wstring less_than_ten(uint64_t number, const wchar_t *unit,
                                          const wchar_t *first) {
    if (unit[0] == default_unit()[0]) {
      const std::wstring str[] = {L"",     first,   L"둘",   L"셋",   L"넷",
                                  L"다섯", L"여섯", L"일곱", L"여덟", L"아홉"};
      return str[number] + unit;
    }
    const std::wstring str[] = {L"",     first,   L"두",   L"세",   L"네",
                                L"다섯", L"여섯", L"일곱", L"여덟", L"아홉"};
    return str[number] + unit;
  }
};
template <typename T> struct cardinal;
template <> struct cardinal<char> {
  static const std::string default_first() { return "하나"; }
  static const std::string first() { return "한"; }
  static const char *ten() { return "열"; }
  static const std::string twenty(const std::string &unit) {
    if (unit.empty())
      return "스물";
    return "스무" + unit;
  }
  static const char *twenty_later() { return "스물"; }
  static const char *thirty() { return "서른"; }
  static const char *forty() { return "마흔"; }
  static const char *fifty() { return "쉰"; }
  static const char *sixty() { return "예순"; }
  static const char *seventy() { return "일흔"; }
  static const char *eighty() { return "여든"; }
  static const char *ninety() { return "아흔"; }
  static const char *hundred() { return "온"; }
  static const char *thousand() { return "즈믄"; }
  static const char *ten_thousand() { return "골"; }
  static const char *million() { return "잘"; }
  static const char *trillion() { return "울"; }
  static const char *ten_quadrillion() { return "경"; }
  static const std::string less_than_ten(uint64_t number,
                                         const std::string &unit,
                                         const std::string &first) {
    if ((!unit.empty()) || first == cardinal::first()) {
      const std::string str[] = {"",     "한",   "두",   "세",   "네",
                                 "다섯", "여섯", "일곱", "여덟", "아홉"};
      return unit.empty() ? str[number] : str[number] + unit;
    }
    const char *str[] = {"",     first.c_str(), "둘",   "셋",   "넷",
                         "다섯", "여섯",        "일곱", "여덟", "아홉"};
    return str[number];
  }
};
template <typename T> struct cardinal;
template <> struct cardinal<wchar_t> {
  static const std::wstring default_first() { return L"하나"; }
  static const std::wstring first() { return L"한"; }
  static const wchar_t *ten() { return L"열"; }
  static const std::wstring twenty(const std::wstring &unit) {
    if (unit.empty())
      return L"스물";
    return L"스무" + unit;
  }
  static const wchar_t *twenty_later() { return L"스물"; }
  static const wchar_t *thirty() { return L"서른"; }
  static const wchar_t *forty() { return L"마흔"; }
  static const wchar_t *fifty() { return L"쉰"; }
  static const wchar_t *sixty() { return L"예순"; }
  static const wchar_t *seventy() { return L"일흔"; }
  static const wchar_t *eighty() { return L"여든"; }
  static const wchar_t *ninety() { return L"아흔"; }
  static const wchar_t *hundred() { return L"온"; }
  static const wchar_t *thousand() { return L"즈믄"; }
  static const wchar_t *ten_thousand() { return L"골"; }
  static const wchar_t *million() { return L"잘"; }
  static const wchar_t *trillion() { return L"울"; }
  static const wchar_t *ten_quadrillion() { return L"경"; }
  static const std::wstring less_than_ten(uint64_t number,
                                          const std::wstring &unit,
                                          const std::wstring &first) {
    if ((!unit.empty()) || first == cardinal::first()) {
      const std::wstring str[] = {L"",     L"한",   L"두",   L"세",   L"네",
                                  L"다섯", L"여섯", L"일곱", L"여덟", L"아홉"};
      return unit.empty() ? str[number] : str[number] + unit;
    }
    const wchar_t *str[] = {L"",     first.c_str(), L"둘",   L"셋",   L"넷",
                            L"다섯", L"여섯",       L"일곱", L"여덟", L"아홉"};
    return str[number];
  }
};
} // namespace constants

template <typename T>
inline std::basic_string<T>
nominal_(uint64_t number, const T *zero = constants::nominal<T>::zero()) {
  typedef constants::nominal<T> nominal_consts;
  if (number < 10) {
    return nominal_consts::less_than_ten(number, zero);
  }
  if (number < 100) {
    uint64_t quotient = number / 10;
    uint64_t remainder = number % 10;
    return ((quotient == 1) ? nominal_consts::ten()
                            : nominal_(quotient, constants::empty<T>()) +
                                  nominal_consts::ten()) +
           nominal_(remainder, constants::empty<T>());
  }
  if (number < 1000) {
    uint64_t quotient = number / 100;
    uint64_t remainder = number % 100;
    return ((quotient == 1) ? nominal_consts::hundred()
                            : nominal_(quotient, constants::empty<T>()) +
                                  nominal_consts::hundred()) +
           nominal_(remainder, constants::empty<T>());
  }
  if (number < 10000) {
    uint64_t quotient = number / 1000;
    uint64_t remainder = number % 1000;
    return ((quotient == 1) ? nominal_consts::thousand()
                            : nominal_(quotient, constants::empty<T>()) +
                                  nominal_consts::thousand()) +
           nominal_(remainder, constants::empty<T>());
  }
  if (number < 100000000) {
    uint64_t quotient = number / 10000;
    uint64_t remainder = number % 10000;
    return ((quotient == 1) ? nominal_consts::ten_thousand()
                            : nominal_(quotient, constants::empty<T>()) +
                                  nominal_consts::ten_thousand()) +
           nominal_(remainder, constants::empty<T>());
  }
  if (number < 1000000000000) {
    uint64_t quotient = number / 100000000;
    uint64_t remainder = number % 100000000;
    return ((quotient == 1) ? nominal_consts::million()
                            : nominal_(quotient, constants::empty<T>()) +
                                  nominal_consts::million()) +
           nominal_(remainder, constants::empty<T>());
  }
  if (number < 10000000000000000) {
    uint64_t quotient = number / 1000000000000;
    uint64_t remainder = number % 1000000000000;
    return ((quotient == 1) ? nominal_consts::trillion()
                            : nominal_(quotient, constants::empty<T>()) +
                                  nominal_consts::trillion()) +
           nominal_(remainder, constants::empty<T>());
  }
  uint64_t quotient = number / 10000000000000000;
  uint64_t remainder = number % 10000000000000000;
  return ((quotient == 1) ? nominal_consts::ten_quadrillion()
                          : nominal_(quotient, constants::empty<T>()) +
                                nominal_consts::ten_quadrillion()) +
         nominal_(remainder, constants::empty<T>());
}

template <typename T>
inline std::basic_string<T>
ordinal_(uint64_t number, const T *unit = constants::ordinal<T>::default_unit(),
         const T *first = constants::ordinal<T>::default_first()) {
  typedef constants::ordinal<T> ordinal_consts;
  if (number == 0) 
    return unit;
  if (number < 10)
    return ordinal_consts::less_than_ten(number, unit, first);
  if (number < 20)
    return ordinal_consts::ten() +
           ordinal_<T>(number - 10, unit, ordinal_consts::first());
  if (number < 30) {
    uint64_t remaining = number - 20;
    if (remaining)
      return ordinal_consts::twenty_later() +
             ordinal_<T>(remaining, unit, ordinal_consts::first());
    return ordinal_consts::twenty() +
           ordinal_(0, unit, ordinal_consts::first());
  }
  if (number < 40)
    return ordinal_consts::thirty() +
           ordinal_<T>(number - 30, unit, ordinal_consts::first());
  if (number < 50)
    return ordinal_consts::forty() +
           ordinal_<T>(number - 40, unit, ordinal_consts::first());
  if (number < 60)
    return ordinal_consts::fifty() +
           ordinal_<T>(number - 50, unit, ordinal_consts::first());
  if (number < 70)
    return ordinal_consts::sixty() +
           ordinal_<T>(number - 60, unit, ordinal_consts::first());
  if (number < 80)
    return ordinal_consts::seventy() +
           ordinal_<T>(number - 70, unit, ordinal_consts::first());
  if (number < 90)
    return ordinal_consts::eighty() +
           ordinal_<T>(number - 80, unit, ordinal_consts::first());
  if (number < 100)
    return ordinal_consts::ninety() +
           ordinal_<T>(number - 90, unit, ordinal_consts::first());
  if (number < 1000) {
    uint64_t quotient = number / 100;
    uint64_t remainder = number % 100;
    return ((quotient == 1)
                ? ordinal_consts::hundred()
                : internal::nominal_(quotient, constants::empty<T>()) +
                      ordinal_consts::hundred()) +
           ordinal_(remainder, unit, ordinal_consts::first());
  }
  if (number < 10000) {
    uint64_t quotient = number / 1000;
    uint64_t remainder = number % 1000;
    return ((quotient == 1)
                ? ordinal_consts::thousand()
                : internal::nominal_(quotient, constants::empty<T>()) +
                      ordinal_consts::thousand()) +
           ordinal_(remainder, unit, ordinal_consts::first());
  }
  if (number < 100000000) {
    uint64_t quotient = number / 10000;
    uint64_t remainder = number % 10000;
    return ((quotient == 1)
                ? ordinal_consts::ten_thousand()
                : internal::nominal_(quotient, constants::empty<T>()) +
                      ordinal_consts::ten_thousand()) +
           ordinal_(remainder, unit, ordinal_consts::first());
  }
  if (number < 1000000000000) {
    uint64_t quotient = number / 100000000;
    uint64_t remainder = number % 100000000;
    return ((quotient == 1)
                ? ordinal_consts::million()
                : internal::nominal_(quotient, constants::empty<T>()) +
                      ordinal_consts::million()) +
           ordinal_(remainder, unit, ordinal_consts::first());
  }
  if (number < 10000000000000000) {
    uint64_t quotient = number / 1000000000000;
    uint64_t remainder = number % 1000000000000;
    return ((quotient == 1)
                ? ordinal_consts::trillion()
                : internal::nominal_(quotient, constants::empty<T>()) +
                      ordinal_consts::trillion()) +
           ordinal_(remainder, unit, ordinal_consts::first());
  }
  uint64_t quotient = number / 10000000000000000;
  uint64_t remainder = number % 10000000000000000;
  return ((quotient == 1)
              ? ordinal_consts::ten_quadrillion()
              : internal::nominal_(quotient, constants::empty<T>()) +
                    ordinal_consts::ten_quadrillion()) +
         ordinal_(remainder, unit, ordinal_consts::first());
}

template <typename T>
inline std::basic_string<T>
cardinal_(uint64_t number,
          const std::basic_string<T> &unit = std::basic_string<T>(),
          const std::basic_string<T> &first =
              constants::cardinal<T>::default_first()) {
  if (number < 10)
    return constants::cardinal<T>::less_than_ten(number, unit, first);
  if (number < 20)
    return constants::cardinal<T>::ten() +
           cardinal_<T>(number - 10, unit, first);
  if (number == 20)
    return constants::cardinal<T>::twenty(unit);
  if (number < 30)
    return constants::cardinal<T>::twenty_later() +
           cardinal_<T>(number - 20, unit, first);
  if (number < 40)
    return constants::cardinal<T>::thirty() +
           cardinal_<T>(number - 30, unit, first);
  if (number < 50)
    return constants::cardinal<T>::forty() +
           cardinal_<T>(number - 40, unit, first);
  if (number < 60)
    return constants::cardinal<T>::fifty() +
           cardinal_<T>(number - 50, unit, first);
  if (number < 70)
    return constants::cardinal<T>::sixty() +
           cardinal_<T>(number - 60, unit, first);
  if (number < 80)
    return constants::cardinal<T>::seventy() +
           cardinal_<T>(number - 70, unit, first);
  if (number < 90)
    return constants::cardinal<T>::eighty() +
           cardinal_<T>(number - 80, unit, first);
  if (number < 100)
    return constants::cardinal<T>::ninety() +
           cardinal_<T>(number - 90, unit, first);
  if (number < 1000) {
    uint64_t quotient = number / 100;
    uint64_t remainder = number % 100;
    return ((quotient == 1) ? constants::cardinal<T>::hundred()
                            : cardinal_<T>(quotient, constants::empty<T>(),
                                           constants::cardinal<T>::first()) +
                                  constants::cardinal<T>::hundred()) +
           cardinal_<T>(remainder, unit, first);
  }
  if (number < 10000) {
    uint64_t quotient = number / 1000;
    uint64_t remainder = number % 1000;
    return ((quotient == 1) ? constants::cardinal<T>::thousand()
                            : cardinal_<T>(quotient, constants::empty<T>(),
                                           constants::cardinal<T>::first()) +
                                  constants::cardinal<T>::thousand()) +
           cardinal_<T>(remainder, unit, first);
  }
  if (number < 100000000) {
    uint64_t quotient = number / 10000;
    uint64_t remainder = number % 10000;
    return ((quotient == 1) ? constants::cardinal<T>::ten_thousand()
                            : cardinal_<T>(quotient, constants::empty<T>(),
                                           constants::cardinal<T>::first()) +
                                  constants::cardinal<T>::ten_thousand()) +
           cardinal_<T>(remainder, unit, first);
  }
  if (number < 1000000000000) {
    uint64_t quotient = number / 100000000;
    uint64_t remainder = number % 100000000;
    return ((quotient == 1) ? constants::cardinal<T>::million()
                            : cardinal_<T>(quotient, constants::empty<T>(),
                                           constants::cardinal<T>::first()) +
                                  constants::cardinal<T>::million()) +
           cardinal_<T>(remainder, unit, first);
  }
  if (number < 10000000000000000) {
    uint64_t quotient = number / 1000000000000;
    uint64_t remainder = number % 1000000000000;
    return ((quotient == 1) ? constants::cardinal<T>::trillion()
                            : cardinal_<T>(quotient, constants::empty<T>(),
                                           constants::cardinal<T>::first()) +
                                  constants::cardinal<T>::trillion()) +
           cardinal_<T>(remainder, unit, first);
  }
  uint64_t quotient = number / 10000000000000000;
  uint64_t remainder = number % 10000000000000000;
  return ((quotient == 1) ? constants::cardinal<T>::ten_quadrillion()
                          : cardinal_<T>(quotient, constants::empty<T>(),
                                         constants::cardinal<T>::first()) +
                                constants::cardinal<T>::ten_quadrillion()) +
         cardinal_<T>(remainder, unit, first);
}
} // namespace internal

inline std::wstring wnominal(uint64_t number) {
  return internal::nominal_<wchar_t>(number);
}

inline std::string nominal(uint64_t number) {
  return internal::nominal_<char>(number);
}

inline std::string
ordinal(uint64_t number,
        const char *unit = internal::constants::ordinal<char>::default_unit()) {
  return internal::ordinal_<char>(number, unit);
}

inline std::wstring
wordinal(uint64_t number,
         const wchar_t *unit =
             internal::constants::ordinal<wchar_t>::default_unit()) {
  return internal::ordinal_<wchar_t>(number, unit);
}

inline std::string cardinal(uint64_t number,
                            const std::string &unit = std::string()) {
  return internal::cardinal_<char>(number, unit);
}

inline std::wstring wcardinal(uint64_t number,
                              const std::wstring &unit = std::wstring()) {
  return internal::cardinal_<wchar_t>(number, unit);
}
} // namespace numeric

namespace syllable {
inline wchar_t onset(wchar_t c) {
  if (L'ㄱ' <= c && c <= L'ㅎ')
    return c;
  static const wchar_t data[] = {
      L'ㄱ', L'ㄲ', L'ㄴ', L'ㄷ', L'ㄸ', L'ㄹ', L'ㅁ', L'ㅂ', L'ㅃ', L'ㅅ',
      L'ㅆ', L'ㅇ', L'ㅈ', L'ㅉ', L'ㅊ', L'ㅋ', L'ㅌ', L'ㅍ', L'ㅎ'};
  const size_t index = (c - L'가') / (21 * 28);
  if ((sizeof(data) / sizeof(wchar_t)) > index)
    return data[index];
  return L'\0';
}

inline wchar_t nucleus(wchar_t c) {
  static const wchar_t data[] = {L'ㅏ', L'ㅐ', L'ㅑ', L'ㅒ', L'ㅓ', L'ㅔ',
                                 L'ㅕ', L'ㅖ', L'ㅗ', L'ㅘ', L'ㅙ', L'ㅚ',
                                 L'ㅛ', L'ㅜ', L'ㅝ', L'ㅞ', L'ㅟ', L'ㅠ',
                                 L'ㅡ', L'ㅢ', L'ㅣ'};
  if (L'ㅏ' <= c && c <= L'ㅣ')
    return c;
  const size_t index = (c - L'가') % (21 * 28) / 28;
  if ((sizeof(data) / sizeof(wchar_t)) > index)
    return data[index];
  return L'\0';
}

inline wchar_t coda(wchar_t c) {
  static const wchar_t data[] = {
      L'\0', L'ㄱ', L'ㄲ', L'ㄳ', L'ㄴ', L'ㄵ', L'ㄶ', L'ㄷ', L'ㄹ', L'ㄺ',
      L'ㄻ', L'ㄼ', L'ㄽ', L'ㄾ', L'ㄿ', L'ㅀ', L'ㅁ', L'ㅂ', L'ㅄ', L'ㅅ',
      L'ㅆ', L'ㅇ', L'ㅈ', L'ㅊ', L'ㅋ', L'ㅌ', L'ㅍ', L'ㅎ'};
  return data[(c - L'가') % 28];
}

struct letter {
  letter(wchar_t c)
      : onset(syllable::onset(c)), nucleus(syllable::nucleus(c)),
        coda(syllable::coda(c)), value(c) {}
  wchar_t onset;
  wchar_t nucleus;
  wchar_t coda;
  wchar_t value;
  bool valid() const { return onset && nucleus; }
};
} // namespace syllable

/**
 * @brief https://en.wikipedia.org/wiki/Korean_postpositions
 */
namespace postposition {
inline const std::wstring &eul() {
  static const std::wstring eul = L"을";
  return eul;
}
inline const std::wstring &reul() {
  static const std::wstring reul = L"를";
  return reul;
}
inline const std::wstring &eun() {
  static const std::wstring eun = L"은";
  return eun;
}
inline const std::wstring &neun() {
  static const std::wstring neun = L"는";
  return neun;
}
inline const std::wstring &i() {
  static const std::wstring i = L"이";
  return i;
}
inline const std::wstring &ga() {
  static const std::wstring ga = L"가";
  return ga;
}
inline const std::wstring &euro() {
  static const std::wstring euro = L"으로";
  return euro;
}
inline const std::wstring &ro() {
  static const std::wstring ro = L"로";
  return ro;
}
inline const std::wstring &wa() {
  static const std::wstring wa = L"와";
  return wa;
}
inline const std::wstring &gwa() {
  static const std::wstring gwa = L"과";
  return gwa;
}
inline const std::wstring &a() {
  static const std::wstring a = L"아";
  return a;
}
inline const std::wstring &ya() {
  static const std::wstring ya = L"야";
  return ya;
}
inline const std::wstring &iyeo() {
  static const std::wstring iyeo = L"이여";
  return iyeo;
}
inline const std::wstring &yeo() {
  static const std::wstring yeo = L"여";
  return yeo;
}
inline const std::wstring &topic(const std::wstring &nouns) {
  return (syllable::coda(ext::back(nouns)) ? eun() : neun());
}
inline const std::wstring &identifier(const std::wstring &nouns) {
  return (syllable::coda(ext::back(nouns)) ? i() : ga());
}
inline const std::wstring &objective(const std::wstring &nouns) {
  return (syllable::coda(ext::back(nouns)) ? eul() : reul());
}
inline const std::wstring &destination(const std::wstring &nouns) {
  wchar_t w = syllable::coda(ext::back(nouns));
  return (w == '\0' || (w == L'ㄹ') ? ro() : euro());
}
inline const std::wstring &conjunction(const std::wstring &nouns) {
  return (syllable::coda(ext::back(nouns)) ? gwa() : wa());
}
inline const std::wstring &vocative(const std::wstring &nouns) {
  return (syllable::coda(ext::back(nouns)) ? a() : ya());
}
inline const std::wstring &exclamation(const std::wstring &nouns) {
  return (syllable::coda(ext::back(nouns)) ? iyeo() : yeo());
}
} // namespace postposition
} // namespace ko_kr
} // namespace lang
} // namespace ext

#endif // _EXT_LANG_
