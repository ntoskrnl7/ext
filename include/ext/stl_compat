/**
 * @file stl_compat
 * @author Jung-kang Lee (ntoskrnl7@gmail.com)
 * @brief This module defines STL compatible macros.
 *
 * CXX_VER
 * CXX_NOEXCEPT
 * CXX_CONSTEXPR
 * CXX_IF_CONSTEXPR
 * CXX_SHARED_MUTEX
 *  - Latest supported shared mutex definitions
 *  - C++17 : std::shared_mutex
 *  - C++14 : std::shared_timed_mutex
 * CXX_FOR
 * CXX_FOR_IT, CXX_FOR_IT_END
 * CXX_FOR_O, CXX_FOR_O_END
 * CXX_INVOKE_RESULT
 *
 * std::byte
 * std::apply
 * std::move
 * std::remove
 * std::remove_if
 * std::erase_if
 * std::remove_cv
 * std::remove_cv_t
 * std::remove_const
 * std::remove_const_t
 * std::remove_reference
 * std::remove_reference_t
 * std::remove_cvref
 * std::remove_cvref_t
 * std::unique_ptr
 * std::make_unique
 * std::make_shared
 * std::to_string
 * std::stoul
 * std::stoull
 * nullptr
 * std::is_same
 * std::is_reference
 * std::enable_if
 * std::integral_constant
 * std::true_type
 * std::false_type
 * std::void_t
 * std::unordered_map
 * std::hash
 *
 * CXX_USE_ALL_FEATURES
 * CXX_USE_STD_BYTE
 * CXX_USE_STD_UNIQUE_PTR
 * CXX_USE_STD_MAKE_UNIQUE
 * CXX_USE_STD_MAKE_SHARED
 * CXX_USE_STD_APPLY
 * CXX_USE_STD_MOVE
 * CXX_USE_STD_REMOVE
 * CXX_USE_STD_REMOVE_IF
 * CXX_USE_STD_REMOVE_CV
 * CXX_USE_STD_REMOVE_CV_T (with CXX_USE_STD_REMOVE_CV)
 * CXX_USE_STD_REMOVE_CONST
 * CXX_USE_STD_REMOVE_CONST_T (with CXX_USE_STD_REMOVE_CONST)
 * CXX_USE_STD_REMOVE_REF
 * CXX_USE_STD_REMOVE_REF_T (with CXX_USE_STD_REMOVE_REF)
 * CXX_USE_STD_REMOVE_CVREF
 * CXX_USE_STD_REMOVE_CVREF_T (with CXX_USE_STD_REMOVE_CVREF)
 * CXX_USE_STD_CSTDINT
 * CXX_USE_UNIQUE_PTR
 * CXX_USE_MAKE_UNIQUE (with CXX_USE_UNIQUE_PTR)
 * CXX_USE_SHARED_PTR
 * CXX_USE_MAKE_SHARED (with CXX_USE_SHARED_PTR)
 * CXX_USE_NULLPTR
 * CXX_USE_STD_THREAD
 * CXX_USE_STD_IS_SAME
 * CXX_USE_STD_IS_REF
 * CXX_USE_STD_ENABLE_IF
 * CXX_USE_STD_INTEGRAL_CONSTANT
 * CXX_USE_STD_TRUE_TYPE
 * CXX_USE_STD_FALSE_TYPE
 * CXX_USE_STD_VOID_T
 * CXX_USE_STD_UNORDERED_MAP
 * CXX_USE_STD_HASH
 * CXX_USE_STD_ERASE_IF
 *
 * Boost
 * CXX_USE_STD_ATOMIC
 * CXX_USE_STD_CHRONO
 * CXX_USE_STD_CONDITION_VARIABLE
 * CXX_USE_STD_THREAD
 * CXX_USE_STD_SHARED_TIMED_MUTEX
 * CXX_USE_STD_SHARED_MUTEX
 * CXX_USE_STD_MUTEX
 * CXX_USE_STD_SYSTEM_ERROR
 * CXX_USE_STD_REGEX
 *
 * @copyright Copyright (c) 2020 C++ Extended template library Authors
 *
 */

#define _EXT_STL_COMPAT_

// Compiler specification definition
#if defined(_MSVC_LANG)
#define CXX_VER _MSVC_LANG
#else                // !defined(_MSVC_LANG)
#if _MSC_VER == 1400 // Visual Studio 2005 version 8.0
#define CXX_VER 2005
#elif _MSC_VER == 1500 // Visual Studio 2008 version 9.0
#define CXX_VER 2008
#elif _MSC_VER == 1600 // Visual Studio 2010 version 10.0
#define CXX_VER 2010
#elif _MSC_VER == 1700 // Visual Studio 2012 version 11.0
#define CXX_VER 2012
#elif _MSC_VER == 1800 // Visual Studio 2013 version 12.0
#define CXX_VER 2013
#elif _MSC_VER == 1800 // Visual Studio 2015 version 13.0
#define CXX_VER 2015
#else
#define CXX_VER __cplusplus
#endif
#endif // !defined(_MSVC_LANG)

// https://docs.microsoft.com/en-us/cpp/overview/visual-cpp-language-conformance
#if defined(_MSC_VER)
#if _MSC_VER >= 1400 // >= Visual Studio 2005 version 8.0
#if !defined(__cpp_rtti)
#define __cpp_rtti 2005 // 199711
#endif
#endif               // >= Visual Studio 2005 version 8.0
#if _MSC_VER >= 1600 // >= Visual Studio 2010 version 10.0
#if !defined(__cpp_lambdas)
#define __cpp_lambdas 2010 // 200907
#endif
#if !defined(__cpp_decltype)
#define __cpp_decltype 2010 // 200707
#endif
#if !defined(__cpp_rvalue_references)
#define __cpp_rvalue_references 2010 // 200610
#endif
#endif               // >= Visual Studio 2010 version 10.0
#if _MSC_VER >= 1700 // >= Visual Studio 2012 version 11.0
#if !defined(__cpp_range_based_for)
#define __cpp_range_based_for 2012 // 200907
#endif
#endif               // >= Visual Studio 2012 version 11.0
#if _MSC_VER >= 1900 // >= Visual Studio 2015 version 14.0
#if !defined(__cpp_alias_templates)
#define __cpp_alias_templates 2015 // 200704
#endif
#if !defined(__cpp_constexpr)
#define __cpp_constexpr 2015 // 200704
#endif
#if !defined(__cpp_init_captures)
#define __cpp_init_captures 2015 // 201304
#endif
#endif // >= Visual Studio 2015 version 14.0
#endif // !defined(_MSC_VER)

// < c++11
#define CXX_CSTDINT_NOT_SUPPORTED
#define CXX_NOEXCEPT_NOT_SUPPORTED
#define CXX_DELETED_FUNCTIONS_NOT_SUPPORTED
#define CXX_DEFAULT_TEMPLATE_ARGUMENTS_NOT_SUPPORTED
#define CXX_STD_REMOVE_CV_NOT_SUPPORTED
#define CXX_STD_REMOVE_CONST_NOT_SUPPORTED
#define CXX_STD_REMOVE_REF_NOT_SUPPORTED
#define CXX_STD_ATOMIC_NOT_SUPPORTED
#define CXX_STD_CHRONO_NOT_SUPPORTED
#define CXX_STD_CONDITION_VARIABLE_NOT_SUPPORTED
#define CXX_STD_MUTEX_NOT_SUPPORTED
#define CXX_STDINT_NOT_SUPPORTED
#define CXX_STD_UNORDERED_MAP_NOT_SUPPORTED
#define CXX_STD_HASH_NOT_SUPPORTED
#define CXX_AUTO_TYPE_NOT_SUPPORTED
#define CXX_NULLPTR_NOT_SUPPORTED
#define CXX_STD_MOVE_NOT_SUPPORTED
#define CXX_STD_UNIQUE_PTR_NOT_SUPPORTED
#define CXX_STD_MAKE_SHARED_NOT_SUPPORTED
#define CXX_STD_SYSTEM_ERROR_NOT_SUPPORTED
#define CXX_STD_IS_SAME_NOT_SUPPORTED
#define CXX_STD_IS_REF_NOT_SUPPORTED
#define CXX_STD_ENABLE_IF_NOT_SUPPORTED
#define CXX_STD_INTEGRAL_CONSTANT_NOT_SUPPORTED
#define CXX_STD_TRUE_TYPE_NOT_SUPPORTED
#define CXX_STD_FALSE_TYPE_NOT_SUPPORTED
#define CXX_STD_REGEX_NOT_SUPPORTED
#define CXX_STD_THREAD_NOT_SUPPORTED
// <= c++11
#define CXX_STD_MAKE_UNIQUE_NOT_SUPPORTED
#define CXX_STD_REMOVE_CV_T_NOT_SUPPORTED
#define CXX_STD_REMOVE_CONST_T_NOT_SUPPORTED
#define CXX_STD_REMOVE_REF_T_NOT_SUPPORTED
#define CXX_STD_SHARED_TIMED_MUTEX_NOT_SUPPORTED
// <= c++14
#define CXX_STD_BYTE_NOT_SUPPORTED
#define CXX_STD_APPLY_NOT_SUPPORTED
#define CXX_STD_SHARED_MUTEX_NOT_SUPPORTED
#define CXX_CONSTEXPR_IF_NOT_SUPPORTED
#define CXX_STD_VOID_T_NOT_SUPPORTED
#define CXX_STD_ANY_NOT_SUPPORTED
#define CXX_STD_REMOVE_NOT_SUPPORTED
#define CXX_STD_REMOVE_IF_NOT_SUPPORTED
// <= c++17
#define CXX_STD_REMOVE_CVREF_NOT_SUPPORTED
#define CXX_STD_REMOVE_CVREF_T_NOT_SUPPORTED
#define CXX_STD_U8STRING_NOT_SUPPORTED
#define CXX_STD_ERASE_IF_NOT_SUPPORTED

#if _MSC_VER >= 1600 // >= Visual Studio 2010 version 10.0
#undef CXX_STDINT_NOT_SUPPORTED
#undef CXX_STD_UNORDERED_MAP_NOT_SUPPORTED
#undef CXX_STD_HASH_NOT_SUPPORTED
#undef CXX_AUTO_TYPE_NOT_SUPPORTED
#undef CXX_NULLPTR_NOT_SUPPORTED
#undef CXX_STD_MOVE_NOT_SUPPORTED
#undef CXX_STD_UNIQUE_PTR_NOT_SUPPORTED
#undef CXX_STD_MAKE_SHARED_NOT_SUPPORTED
#undef CXX_STD_SYSTEM_ERROR_NOT_SUPPORTED
#undef CXX_STD_IS_SAME_NOT_SUPPORTED
#undef CXX_STD_IS_REF_NOT_SUPPORTED
#undef CXX_STD_ENABLE_IF_NOT_SUPPORTED
#undef CXX_STD_INTEGRAL_CONSTANT_NOT_SUPPORTED
#undef CXX_STD_TRUE_TYPE_NOT_SUPPORTED
#undef CXX_STD_FALSE_TYPE_NOT_SUPPORTED
#undef CXX_STD_REGEX_NOT_SUPPORTED
#endif               // >= Visual Studio 2010 version 10.0
#if _MSC_VER >= 1700 // >= Visual Studio 2012 version 11.0
#undef CXX_STD_THREAD_NOT_SUPPORTED
#endif // >= Visual Studio 2012 version 11.0

#if CXX_VER >= 201103L
#undef CXX_CSTDINT_NOT_SUPPORTED
#undef CXX_NOEXCEPT_NOT_SUPPORTED
#undef CXX_DELETED_FUNCTIONS_NOT_SUPPORTED
#undef CXX_DEFAULT_TEMPLATE_ARGUMENTS_NOT_SUPPORTED
#undef CXX_STD_REMOVE_CV_NOT_SUPPORTED
#undef CXX_STD_REMOVE_CONST_NOT_SUPPORTED
#undef CXX_STD_REMOVE_REF_NOT_SUPPORTED
#undef CXX_STD_ATOMIC_NOT_SUPPORTED
#undef CXX_STD_CHRONO_NOT_SUPPORTED
#undef CXX_STD_CONDITION_VARIABLE_NOT_SUPPORTED
#undef CXX_STD_MUTEX_NOT_SUPPORTED
#undef CXX_STDINT_NOT_SUPPORTED
#undef CXX_STD_UNORDERED_MAP_NOT_SUPPORTED
#undef CXX_STD_HASH_NOT_SUPPORTED
#undef CXX_AUTO_TYPE_NOT_SUPPORTED
#undef CXX_NULLPTR_NOT_SUPPORTED
#undef CXX_STD_MOVE_NOT_SUPPORTED
#undef CXX_STD_UNIQUE_PTR_NOT_SUPPORTED
#undef CXX_STD_MAKE_SHARED_NOT_SUPPORTED
#undef CXX_STD_SYSTEM_ERROR_NOT_SUPPORTED
#undef CXX_STD_IS_SAME_NOT_SUPPORTED
#undef CXX_STD_IS_REF_NOT_SUPPORTED
#undef CXX_STD_ENABLE_IF_NOT_SUPPORTED
#undef CXX_STD_INTEGRAL_CONSTANT_NOT_SUPPORTED
#undef CXX_STD_TRUE_TYPE_NOT_SUPPORTED
#undef CXX_STD_FALSE_TYPE_NOT_SUPPORTED
#undef CXX_STD_REGEX_NOT_SUPPORTED
#undef CXX_STD_THREAD_NOT_SUPPORTED
#endif // CXX_VER >= 201103L
#if CXX_VER >= 201402L
#undef CXX_STD_MAKE_UNIQUE_NOT_SUPPORTED
#undef CXX_STD_REMOVE_CV_T_NOT_SUPPORTED
#undef CXX_STD_REMOVE_CONST_T_NOT_SUPPORTED
#undef CXX_STD_REMOVE_REF_T_NOT_SUPPORTED
#undef CXX_STD_SHARED_TIMED_MUTEX_NOT_SUPPORTED
#endif // CXX_VER >= 201402L
#if CXX_VER >= 201703L
#undef CXX_STD_BYTE_NOT_SUPPORTED
#undef CXX_STD_APPLY_NOT_SUPPORTED
#undef CXX_STD_SHARED_MUTEX_NOT_SUPPORTED
#undef CXX_CONSTEXPR_IF_NOT_SUPPORTED
#undef CXX_STD_VOID_T_NOT_SUPPORTED
#undef CXX_STD_ANY_NOT_SUPPORTED
#undef CXX_STD_REMOVE_NOT_SUPPORTED
#undef CXX_STD_REMOVE_IF_NOT_SUPPORTED
#endif // CXX_VER >= 201703L
#if CXX_VER >= 202002L
#undef CXX_STD_REMOVE_CVREF_NOT_SUPPORTED
#undef CXX_STD_REMOVE_CVREF_T_NOT_SUPPORTED
#undef CXX_STD_U8STRING_NOT_SUPPORTED
#undef CXX_STD_ERASE_IF_NOT_SUPPORTED
#endif // CXX_VER < 201703L

#if defined(__cpp_lib_byte) && (CXX_VER >= __cpp_lib_byte)
#undef CXX_STD_BYTE_NOT_SUPPORTED
#endif

#if defined(__cpp_lib_erase_if) && (CXX_VER >= __cpp_lib_erase_if)
#undef CXX_STD_ERASE_IF_NOT_SUPPORTED
#endif

#if ((defined(__cpp_lib_remove_cvref) &&                                       \
      (CXX_VER >= __cpp_lib_remove_cvref))) ||                                 \
    (defined(_MSC_VER) && (CXX_VER >= 201704L))
#undef CXX_STD_REMOVE_CVREF_NOT_SUPPORTED
#undef CXX_STD_REMOVE_CVREF_T_NOT_SUPPORTED
#endif

#if ((defined(__cpp_lib_char8_t) && (CXX_VER >= __cpp_lib_char8_t))) ||        \
    (defined(_MSC_VER) && (CXX_VER >= 201704L))
#undef CXX_STD_U8STRING_NOT_SUPPORTED
#endif

///
/// If CXX_USE_STD_ALL_FEATURES specified, enable all features.
///
#ifdef CXX_USE_STD_ALL_FEATURES
#define CXX_USE_STD_CSTDINT
#define CXX_USE_STD_SYSTEM_ERROR
#define CXX_USE_STD_BYTE
#define CXX_USE_STD_UNIQUE_PTR
#define CXX_USE_STD_MAKE_UNIQUE
#define CXX_USE_STD_MAKE_SHARED
#define CXX_USE_STD_ATOMIC
#define CXX_USE_STD_CHRONO
#define CXX_USE_STD_CONDITION_VARIABLE
#define CXX_USE_STD_THREAD
#define CXX_USE_STD_SHARED_TIMED_MUTEX
#define CXX_USE_STD_SHARED_MUTEX
#define CXX_USE_STD_MUTEX
#define CXX_USE_STD_SYSTEM_ERROR
#define CXX_USE_STD_MOVE
#define CXX_USE_STD_REMOVE
#define CXX_USE_STD_REMOVE_IF
#define CXX_USE_STD_APPLY
#define CXX_USE_STD_REMOVE_CV
#define CXX_USE_STD_REMOVE_CV_T
#define CXX_USE_STD_REMOVE_CONST
#define CXX_USE_STD_REMOVE_CONST_T
#define CXX_USE_STD_REMOVE_REF
#define CXX_USE_STD_REMOVE_REF_T
#define CXX_USE_STD_REMOVE_CVREF
#define CXX_USE_STD_REMOVE_CVREF_T
#define CXX_USE_NULLPTR
#define CXX_USE_STD_IS_SAME
#define CXX_USE_STD_IS_REF
#define CXX_USE_STD_ENABLE_IF
#define CXX_USE_STD_VOID_T
#define CXX_USE_STD_REGEX
#define CXX_STD_ERASE_IF_NOT_SUPPORTED
#endif

///
/// Enable related features.
///
#ifdef CXX_USE_STD_IS_SAME
#define CXX_USE_STD_INTEGRAL_CONSTANT
#endif

#ifdef CXX_USE_STD_INTEGRAL_CONSTANT
#define CXX_USE_STD_TRUE_TYPE
#define CXX_USE_STD_FALSE_TYPE
#endif

#ifdef CXX_USE_STD_REMOVE_CV_T
#define CXX_USE_STD_REMOVE_CV
#endif

#ifdef CXX_USE_STD_REMOVE_CONST_T
#define CXX_USE_STD_REMOVE_CONST
#endif

#ifdef CXX_USE_STD_REMOVE_REF_T
#define CXX_USE_STD_REMOVE_REF
#endif

#ifdef CXX_USE_STD_REMOVE_CVREF_T
#define CXX_USE_STD_REMOVE_CVREF
#endif

#ifdef CXX_USE_STD_MAKE_UNIQUE
#define CXX_USE_STD_UNIQUE_PTR
#define CXX_USE_STD_MOVE
#endif

#ifdef CXX_USE_STD_MAKE_SHARED
#define CXX_USE_STD_SHARED_PTR
#define CXX_USE_STD_MOVE
#endif

#if defined(CXX_USE_STD_REMOVE) || defined(CXX_USE_STD_REMOVE_IF)
#define CXX_USE_STD_MOVE
#endif

///
///
///
#if (!defined(CXX_STD_BYTE_NOT_SUPPORTED)) && defined(CXX_USE_STD_BYTE)
#include <cstddef>
#endif
#if (!defined(CXX_STD_THREAD_NOT_SUPPORTED)) && defined(CXX_USE_STD_THREAD)
#include <thread>
#endif
#if (!defined(CXX_STD_CHRONO_NOT_SUPPORTED)) && defined(CXX_USE_STD_CHRONO)
#include <chrono>
#endif

///
/// If already supported, disable feature
///
#if !defined(CXX_STD_REGEX_NOT_SUPPORTED)
#undef CXX_USE_STD_REGEX
#endif
#if !defined(CXX_STD_ERASE_IF_NOT_SUPPORTED)
#undef CXX_USE_STD_ERASE_IF
#endif
#if !defined(CXX_STD_VOID_T_NOT_SUPPORTED) || defined(__cpp_lib_void_t) ||     \
    !defined(__cpp_variadic_templates)
#undef CXX_USE_STD_VOID_T
#endif
#if !defined(CXX_STD_IS_SAME_NOT_SUPPORTED)
#undef CXX_USE_STD_IS_SAME
#endif
#if !defined(CXX_STD_IS_REF_NOT_SUPPORTED)
#undef CXX_USE_STD_IS_REF
#endif
#if !defined(CXX_STD_ENABLE_IF_NOT_SUPPORTED)
#undef CXX_USE_STD_ENABLE_IF
#endif
#if !defined(CXX_STD_INTEGRAL_CONSTANT_NOT_SUPPORTED)
#undef CXX_USE_STD_INTEGRAL_CONSTANT
#endif
#if !defined(CXX_STD_TRUE_TYPE_NOT_SUPPORTED)
#undef CXX_USE_STD_TRUE_TYPE
#endif
#if !defined(CXX_STD_FALSE_TYPE_NOT_SUPPORTED)
#undef CXX_USE_STD_FALSE_TYPE
#endif
#if !defined(CXX_CSTDINT_NOT_SUPPORTED)
#undef CXX_USE_STD_CSTDINT
#endif
#if !defined(CXX_STD_BYTE_NOT_SUPPORTED)
#undef CXX_USE_STD_BYTE
#endif
#if !defined(CXX_STD_UNIQUE_PTR_NOT_SUPPORTED)
#undef CXX_USE_STD_UNIQUE_PTR
#endif
#if !defined(CXX_STD_MAKE_UNIQUE_NOT_SUPPORTED)
#undef CXX_USE_STD_MAKE_UNIQUE
#endif
#if !defined(CXX_STD_MAKE_SHARED_NOT_SUPPORTED)
#undef CXX_USE_STD_MAKE_SHARED
#endif

#if !defined(CXX_STD_UNORDERED_MAP_NOT_SUPPORTED)
#if defined(BOOST_UNORDERED_UNORDERED_MAP_HPP_INCLUDED) &&                     \
    (defined(_MSC_VER) && (_MSC_VER > 1600))
#undef CXX_USE_STD_UNORDERED_MAP
#endif
#endif

#if !defined(CXX_STD_HASH_NOT_SUPPORTED)
#if defined(BOOST_FUNCTIONAL_HASH_EXTENSIONS_HPP) &&                           \
    (defined(_MSC_VER) && (_MSC_VER > 1600))
#undef CXX_USE_STD_HASH
#endif
#endif

#if !defined(CXX_STD_THREAD_NOT_SUPPORTED)
#undef CXX_USE_STD_THREAD
#endif
#if !defined(CXX_STD_MOVE_NOT_SUPPORTED)
#undef CXX_USE_STD_MOVE
#endif
#if !defined(CXX_STD_REMOVE_NOT_SUPPORTED)
#undef CXX_USE_STD_REMOVE
#endif
#if !defined(CXX_STD_REMOVE_IF_NOT_SUPPORTED)
#undef CXX_USE_STD_REMOVE_IF
#endif
#if !defined(CXX_STD_APPLY_NOT_SUPPORTED) || !defined(__cpp_variadic_templates)
#undef CXX_USE_STD_APPLY
#endif
#if !defined(CXX_STD_REMOVE_CV_NOT_SUPPORTED) ||                               \
    !(defined(_MSC_VER) && _MSC_VER < 1600)
#undef CXX_USE_STD_REMOVE_CV
#endif
#if defined(CXX_STD_REMOVE_CV_T_NOT_SUPPORTED) ||                              \
    !defined(__cpp_alias_templates)
#undef CXX_USE_STD_REMOVE_CV_T
#endif
#if !defined(CXX_STD_REMOVE_CONST_NOT_SUPPORTED) ||                            \
    !(defined(_MSC_VER) && _MSC_VER < 1600)
#undef CXX_USE_STD_REMOVE_CONST
#endif
#if !defined(CXX_STD_REMOVE_CONST_T_NOT_SUPPORTED) ||                          \
    !defined(__cpp_alias_templates)
#undef CXX_USE_STD_REMOVE_CONST_T
#endif
#if !defined(CXX_STD_REMOVE_REF_NOT_SUPPORTED) ||                              \
    !(defined(_MSC_VER) && _MSC_VER < 1600)
#undef CXX_USE_STD_REMOVE_REF
#endif
#if !defined(CXX_STD_REMOVE_REF_T_NOT_SUPPORTED) ||                            \
    !defined(__cpp_alias_templates)
#undef CXX_USE_STD_REMOVE_REF_T
#endif
#if !defined(CXX_STD_REMOVE_CVREF_NOT_SUPPORTED)
#undef CXX_USE_STD_REMOVE_CVREF
#endif
#if !defined(CXX_STD_REMOVE_CVREF_T_NOT_SUPPORTED) ||                          \
    !defined(__cpp_alias_templates)
#undef CXX_USE_STD_REMOVE_CVREF_T
#endif
#if !defined(CXX_NULLPTR_NOT_SUPPORTED)
#undef CXX_USE_NULLPTR
#endif

///
/// <cstdint> or <stdint.h>
///
#ifdef CXX_USE_STD_CSTDINT
#define _EXT_STD_CSTDINT_
typedef signed char int8_t;
typedef unsigned char uint8_t;
typedef signed short int int16_t;
typedef unsigned short int uint16_t;
typedef signed int int32_t;
typedef unsigned int uint32_t;
typedef signed long long int64_t;
typedef unsigned long long uint64_t;

typedef signed char int_least8_t;
typedef unsigned char uint_least8_t;
typedef signed short int int_least16_t;
typedef unsigned short int uint_least16_t;
typedef signed int int_least32_t;
typedef unsigned int uint_least32_t;
typedef signed long long int_least64_t;
typedef unsigned long long uint_least64_t;
#if defined(_MSC_VER) && _MSC_VER < 1600
typedef signed char int_fast8_t;
#endif
typedef unsigned char uint_fast8_t;
#if defined(_MSC_VER) && _MSC_VER < 1600
typedef signed short int int_fast16_t;
typedef unsigned short int uint_fast16_t;
#endif
typedef signed int int_fast32_t;
typedef unsigned int uint_fast32_t;
typedef signed long long int_fast64_t;
typedef unsigned long long uint_fast64_t;

typedef signed long long intmax_t;
typedef unsigned long long uintmax_t;
#undef CXX_USE_STD_CSTDINT
#endif // CXX_USE_STD_CSTDINT

///
/// When use Boost
///
#if defined(CXX_USE_STD_REMOVE_CV) &&                                          \
    defined(CXX_STD_REMOVE_CV_NOT_SUPPORTED) &&                                \
    defined(BOOST_TT_REMOVE_CV_HPP_INCLUDED)
#ifndef _EXT_STD_REMOVE_CV_
#define _EXT_STD_REMOVE_CV_
namespace std {
using boost::remove_cv;
}
#undef CXX_USE_STD_REMOVE_CV
#endif // _EXT_STD_REMOVE_CV_
#endif // defined(CXX_STD_REMOVE_CV_NOT_SUPPORTED) &&
       // defined(BOOST_TT_REMOVE_CV_HPP_INCLUDED)

#if defined(CXX_USE_STD_REMOVE_CONST) &&                                       \
    defined(CXX_STD_REMOVE_CONST_NOT_SUPPORTED) &&                             \
    defined(BOOST_TT_REMOVE_CONST_HPP_INCLUDED)
#ifndef _EXT_STD_REMOVE_CONST_
#define _EXT_STD_REMOVE_CONST_
namespace std {
using boost::remove_const;
}
#undef CXX_USE_STD_REMOVE_CONST
#endif // _EXT_STD_REMOVE_CONST_
#endif // defined(CXX_STD_REMOVE_CONST_NOT_SUPPORTED) &&
       // defined(BOOST_TT_REMOVE_CONST_HPP_INCLUDED)

#if defined(CXX_USE_STD_REMOVE_REF) &&                                         \
    defined(CXX_STD_REMOVE_REF_NOT_SUPPORTED) &&                               \
    defined(BOOST_TT_REMOVE_REFERENCE_HPP_INCLUDED)
#ifndef _EXT_STD_REMOVE_REF_
#define _EXT_STD_REMOVE_REF_
namespace std {
using boost::remove_reference;
}
#undef CXX_USE_STD_REMOVE_REF
#endif // _EXT_STD_REMOVE_REF_
#endif // defined(CXX_STD_REMOVE_REF_NOT_SUPPORTED) &&
       // defined(BOOST_TT_REMOVE_REFERENCE_HPP_INCLUDED)

#if defined(CXX_USE_STD_REMOVE_CVREF) &&                                       \
    defined(CXX_STD_REMOVE_CVREF_NOT_SUPPORTED) &&                             \
    defined(BOOST_TT_REMOVE_CV_REF_HPP_INCLUDED)
#ifndef _EXT_STD_REMOVE_CVREF_
#define _EXT_STD_REMOVE_CVREF_
namespace std {
template <typename T> struct remove_cvref {
  typedef typename boost::remove_cv_ref<T>::type type;
};
} // namespace std
#undef CXX_USE_STD_REMOVE_CVREF
#endif // _EXT_STD_REMOVE_CVREF_
#endif // defined(CXX_STD_REMOVE_CVREF_NOT_SUPPORTED) &&
       // defined(BOOST_TT_REMOVE_CV_REF_HPP_INCLUDED)

#if defined(CXX_USE_STD_CSTDINT) && defined(CXX_CSTDINT_NOT_SUPPORTED) &&      \
    defined(BOOST_CSTDINT_HPP)
#undef CXX_USE_STD_CSTDINT
#endif

#if defined(CXX_USE_STD_MOVE) && defined(CXX_STD_MOVE_NOT_SUPPORTED) &&        \
    defined(BOOST_MOVE_MOVE_HPP)
#ifndef _EXT_STD_MOVE_
#define _EXT_STD_MOVE_
namespace std {
using boost::move;
} // namespace std
#undef CXX_USE_STD_MOvE
#endif // _EXT_STD_MOVE_
#endif

#if defined(CXX_USE_STD_UNIQUE_PTR) &&                                         \
    defined(CXX_STD_UNIQUE_PTR_NOT_SUPPORTED) &&                               \
    defined(BOOST_MOVE_UNIQUE_PTR_HPP_INCLUDED)
#ifndef _EXT_STD_UNIQUE_PTR_
#define _EXT_STD_UNIQUE_PTR_
namespace std {
using boost::movelib::unique_ptr;
} // namespace std
#undef CXX_USE_STD_UNIQUE_PTR
#endif // _EXT_STD_UNIQUE_PTR_
#endif

#if defined(CXX_USE_STD_MAKE_UNIQUE) &&                                        \
    defined(CXX_STD_MAKE_UNIQUE_NOT_SUPPORTED) &&                              \
    defined(BOOST_MAKE_UNIQUE_HPP_INCLUDED)
#ifndef _EXT_STD_MAKE_UNIQUE_
#define _EXT_STD_MAKE_UNIQUE_
#include <boost/make_unique.hpp>
namespace std {
using boost::make_unique;
} // namespace std
#undef CXX_USE_STD_MAKE_UNIQUE
#endif // _EXT_STD_MAKE_UNIQUE_
#endif

#if defined(CXX_USE_STD_MAKE_SHARED) &&                                        \
    defined(CXX_STD_MAKE_SHARED_NOT_SUPPORTED) &&                              \
    defined(BOOST_SMART_PTR_SHARED_PTR_HPP_INCLUDED)
#ifndef _EXT_STD_MAKE_SHARED_
#define _EXT_STD_MAKE_SHARED_
#include <boost/make_shared.hpp>
namespace std {
#ifndef _EXT_STD_SHARED_PTR_
#define _EXT_STD_SHARED_PTR_
using boost::shared_ptr;
#undef CXX_USE_STD_SHARED_PTR
#endif // _EXT_STD_SHARED_PTR_
using boost::make_shared;
} // namespace std
#undef CXX_USE_STD_MAKE_SHARED
#endif // _EXT_STD_MAKE_SHARED_
#endif

#if defined(CXX_USE_STD_THREAD) && defined(CXX_STD_THREAD_NOT_SUPPORTED) &&    \
    defined(BOOST_THREAD_THREAD_HPP)
#ifndef _EXT_STD_THREAD_
#define _EXT_STD_THREAD_
namespace std {
using boost::thread;
namespace this_thread {
using namespace boost::this_thread;
} // namespace this_thread
} // namespace std
#undef CXX_USE_STD_THREAD
#endif // _EXT_STD_THREAD_
#endif

#if defined(CXX_USE_STD_CHRONO) && defined(CXX_STD_CHRONO_NOT_SUPPORTED) &&    \
    defined(BOOST_CHRONO_HPP)
#ifndef _EXT_STD_CHRONO_
#define _EXT_STD_CHRONO_
namespace std {
namespace chrono {
using namespace boost::chrono;
}
} // namespace std
#undef CXX_USE_STD_CHRONO
#endif // _EXT_STD_CHRONO_
#endif

#if defined(CXX_USE_STD_CONDITION_VARIABLE) &&                                 \
    defined(CXX_STD_CONDITION_VARIABLE_NOT_SUPPORTED) &&                       \
    defined(BOOST_THREAD_CONDITION_VARIABLE_HPP)
#ifndef _EXT_STD_CONDITION_VARIABLE_
#define _EXT_STD_CONDITION_VARIABLE_
namespace std {
using boost::condition_variable;
} // namespace std
#undef CXX_USE_STD_CONDITION_VARIABLE
#endif // _EXT_STD_CONDITION_VARIABLE_
#endif

#if defined(CXX_USE_STD_ATOMIC) && defined(CXX_STD_ATOMIC_NOT_SUPPORTED) &&    \
    defined(BOOST_ATOMIC_HPP)
#ifndef _EXT_STD_ATOMIC_
#define _EXT_STD_ATOMIC_
namespace std {
using boost::atomic;
typedef boost::atomic<bool> atomic_bool;
typedef boost::atomic<char> atomic_char;
typedef boost::atomic<signed char> atomic_schar;
typedef boost::atomic<unsigned char> atomic_uchar;
typedef boost::atomic<short> atomic_short;
typedef boost::atomic<unsigned short> atomic_ushort;
typedef boost::atomic<int> atomic_int;
typedef boost::atomic<unsigned int> atomic_uint;
typedef boost::atomic<long> atomic_long;
typedef boost::atomic<unsigned long> atomic_ulong;
typedef boost::atomic<long long> atomic_llong;
typedef boost::atomic<unsigned long long> atomic_ullong;

#if !defined(CXX_STDINT_NOT_SUPPORTED) || !defined(CXX_CSTDINT_NOT_SUPPORTED)
#ifdef __cpp_lib_char8_t
typedef boost::atomic<char8_t> atomic_char8_t;
#endif // __cpp_lib_char8_t

#ifdef __cpp_unicode_characters
typedef boost::atomic<char16_t> atomic_char16_t;
typedef boost::atomic<char32_t> atomic_char32_t;
#endif // __cpp_unicode_characters

typedef boost::atomic<wchar_t> atomic_wchar_t;

typedef boost::atomic<int8_t> atomic_int8_t;
typedef boost::atomic<uint8_t> atomic_uint8_t;
typedef boost::atomic<int16_t> atomic_int16_t;
typedef boost::atomic<uint16_t> atomic_uint16_t;
typedef boost::atomic<int32_t> atomic_int32_t;
typedef boost::atomic<uint32_t> atomic_uint32_t;
typedef boost::atomic<int64_t> atomic_int64_t;
typedef boost::atomic<uint64_t> atomic_uint64_t;

typedef boost::atomic<int_least8_t> atomic_int_least8_t;
typedef boost::atomic<uint_least8_t> atomic_uint_least8_t;
typedef boost::atomic<int_least16_t> atomic_int_least16_t;
typedef boost::atomic<uint_least16_t> atomic_uint_least16_t;
typedef boost::atomic<int_least32_t> atomic_int_least32_t;
typedef boost::atomic<uint_least32_t> atomic_uint_least32_t;
typedef boost::atomic<int_least64_t> atomic_int_least64_t;
typedef boost::atomic<uint_least64_t> atomic_uint_least64_t;

typedef boost::atomic<int_fast8_t> atomic_int_fast8_t;
typedef boost::atomic<uint_fast8_t> atomic_uint_fast8_t;
typedef boost::atomic<int_fast16_t> atomic_int_fast16_t;
typedef boost::atomic<uint_fast16_t> atomic_uint_fast16_t;
typedef boost::atomic<int_fast32_t> atomic_int_fast32_t;
typedef boost::atomic<uint_fast32_t> atomic_uint_fast32_t;
typedef boost::atomic<int_fast64_t> atomic_int_fast64_t;
typedef boost::atomic<uint_fast64_t> atomic_uint_fast64_t;

typedef boost::atomic<intptr_t> atomic_intptr_t;
typedef boost::atomic<uintptr_t> atomic_uintptr_t;
typedef boost::atomic<size_t> atomic_size_t;
typedef boost::atomic<ptrdiff_t> atomic_ptrdiff_t;
typedef boost::atomic<intmax_t> atomic_intmax_t;
typedef boost::atomic<uintmax_t> atomic_uintmax_t;
#endif // !defined(CXX_STDINT_NOT_SUPPORTED) ||
       // !defined(CXX_CSTDINT_NOT_SUPPORTED)

} // namespace std
#undef CXX_USE_STD_ATOMIC
#endif // _EXT_STD_ATOMIC_
#endif

#if defined(CXX_USE_STD_SYSTEM_ERROR) &&                                       \
    defined(CXX_STD_SYSTEM_ERROR_NOT_SUPPORTED) &&                             \
    defined(BOOST_SYSTEM_SYSTEM_ERROR_HPP)
#ifndef _EXT_STD_SYSTEM_ERROR_
#define _EXT_STD_SYSTEM_ERROR_
namespace std {
using namespace boost::system;
namespace errc {
using namespace boost::system::errc;
typedef boost::system::errc::errc_t errc;
} // namespace errc
} // namespace std
#undef CXX_USE_STD_SYSTEM_ERROR
#endif // _EXT_STD_SYSTEM_ERROR_
#endif

#if defined(CXX_USE_STD_HASH) && defined(BOOST_FUNCTIONAL_HASH_EXTENSIONS_HPP)
#if (defined(_XFUNCTIONAL_) && _MSC_VER == 1600)
// VS2010
//  - boost/regex/v4/regex_workaround.hpp -> vector -> xfunctional -> std::hash
#define CXX_USE_BOOST_NAMESPACE_HASH
#else
#ifndef _EXT_STD_HASH_
#define _EXT_STD_HASH_
namespace std {
using boost::hash;
} // namespace std
#undef CXX_USE_STD_HASH
#endif // _EXT_STD_HASH_
#endif // (defined(_XFUNCTIONAL_) && _MSC_VER == 1600)
#endif

#if defined(CXX_USE_STD_UNORDERED_MAP) &&                                      \
    defined(BOOST_UNORDERED_UNORDERED_MAP_HPP_INCLUDED)
#ifndef _EXT_STD_UNORDERED_MAP_
#define _EXT_STD_UNORDERED_MAP_
namespace std {
using boost::unordered::unordered_map;
} // namespace std
#undef CXX_USE_STD_UNORDERED_MAP
#endif // _EXT_STD_UNORDERED_MAP_
#endif

#if defined(CXX_USE_STD_SHARED_TIMED_MUTEX) &&                                 \
    defined(CXX_STD_SHARED_TIMED_MUTEX_NOT_SUPPORTED) &&                       \
    defined(BOOST_THREAD_SHARED_MUTEX_HPP)
#ifndef _EXT_STD_SHARED_TIMED_MUTEX_
#define _EXT_STD_SHARED_TIMED_MUTEX_
namespace std {
using boost::adopt_lock;
using boost::defer_lock;
using boost::shared_lock;
using boost::shared_timed_mutex;
using boost::try_to_lock;
using boost::unique_lock;
} // namespace std
#undef CXX_USE_STD_SHARED_TIMED_MUTEX
#endif // _EXT_STD_SHARED_TIMED_MUTEX_
#endif

#if defined(CXX_USE_STD_SHARED_MUTEX) &&                                       \
    defined(CXX_STD_SHARED_MUTEX_NOT_SUPPORTED) &&                             \
    defined(BOOST_THREAD_SHARED_MUTEX_HPP)
#ifndef _EXT_STD_SHARED_MUTEX_
#define _EXT_STD_SHARED_MUTEX_
namespace std {
using boost::adopt_lock;
using boost::defer_lock;
using boost::shared_lock;
using boost::shared_mutex;
using boost::try_to_lock;
using boost::unique_lock;
} // namespace std
#undef CXX_USE_STD_SHARED_MUTEX
#endif // _EXT_STD_SHARED_MUTEX_
#endif

#if defined(CXX_USE_STD_MUTEX) && defined(CXX_STD_MUTEX_NOT_SUPPORTED) &&      \
    defined(BOOST_THREAD_MUTEX_HPP)
#ifndef _EXT_STD_MUTEX_
#define _EXT_STD_MUTEX_
namespace std {
using boost::adopt_lock;
using boost::defer_lock;
using boost::mutex;
using boost::try_to_lock;
using boost::unique_lock;
} // namespace std
#undef CXX_USE_STD_MUTEX
#endif // _EXT_STD_MUTEX_
#endif

#if defined(CXX_USE_STD_REGEX) && defined(CXX_STD_REGEX_NOT_SUPPORTED) &&      \
    defined(BOOST_RE_REGEX_HPP)
#ifndef _EXT_STD_REGEX_
#define _EXT_STD_REGEX_
namespace std {
typedef boost::regex regex;
typedef boost::smatch smatch;
using boost::regex_match;
using boost::regex_search;
} // namespace std
#undef CXX_USE_STD_REGEX
#endif // _EXT_STD_REGEX_
#endif

///
/// std::tr1
///
#if defined(_MSC_VER) && _MSC_VER < 1600
#ifdef _TUPLE_
#ifndef _EXT_STD_TUPLE_
#define _EXT_STD_TUPLE_
namespace std {
using std::tr1::tuple;
#undef _EXT_STD_TUPLE_
} // namespace std
#endif // _EXT_STD_TUPLE_
#endif // _TUPLE_

#ifdef _MEMORY_ // VS2008 memory
#ifndef _EXT_STD_SHARED_PTR_
#define _EXT_STD_SHARED_PTR_
namespace std {
using std::tr1::shared_ptr;
#undef CXX_USE_STD_SHARED_PTR
} // namespace std
#endif // _EXT_STD_SHARED_PTR_
#endif // _MEMORY_

#ifdef _UNORDERED_MAP_ // VS2008 unordered_map
#ifndef _EXT_STD_UNORDERED_MAP_
#define _EXT_STD_UNORDERED_MAP_
namespace std {
using std::tr1::hash;
using std::tr1::unordered_map;
#undef CXX_USE_STD_UNORDERED_MAP
} // namespace std
#endif // _EXT_STD_UNORDERED_MAP_
#endif // _UNORDERED_MAP_

#ifdef _UNORDERED_SET_ // VS2008 unordered_set
#ifndef _EXT_STD_UNORDERED_SET_
#define _EXT_STD_UNORDERED_SET_
namespace std {
using std::tr1::unordered_set;
#undef CXX_USE_STD_UNORDERED_SET
} // namespace std
#endif // _EXT_STD_UNORDERED_SET_
#endif // _UNORDERED_SET_

#ifdef _FUNCTIONAL_ // VS2008 functional
#ifndef _EXT_STD_FUNCTIONAL_
#define _EXT_STD_FUNCTIONAL_
namespace std {
using std::tr1::bind;
using std::tr1::function;
namespace placeholders {
using namespace std::tr1::placeholders;
}
#undef _EXT_STD_FUNCTIONAL_
} // namespace std
#endif // _EXT_STD_FUNCTIONAL_
#endif // _FUNCTIONAL_
#endif

///
/// CXX_NOEXCEPT
///
#if defined(CXX_NOEXCEPT_NOT_SUPPORTED)
#define CXX_NOEXCEPT
#else
#define CXX_NOEXCEPT noexcept
#endif

///
/// CXX_CONSTEXPR
///
#if defined(__cpp_constexpr) && (CXX_VER >= __cpp_constexpr)
#define CXX_CONSTEXPR constexpr
#else
#define CXX_CONSTEXPR
#endif

///
/// CXX_IF_CONSTEXPR
///
#if defined(__cpp_if_constexpr) && (CXX_VER < __cpp_if_constexpr)
#define CXX_IF_CONSTEXPR if constexpr
#else
#define CXX_IF_CONSTEXPR if
#endif

///
/// CXX_INVOKE_RESULT
///
#if CXX_VER >= 201703L
#define CXX_INVOKE_RESULT(F, Args) std::invoke_result_t<F, Args>
#elif CXX_VER >= 201402L
#define CXX_INVOKE_RESULT(F, Args) std::result_of_t<F(Args)>
#else
#define CXX_INVOKE_RESULT(F, Args) typename std::result_of<F(Args)>::type
#endif

///
/// CXX_SHARED_MUTEX
///
#if CXX_VER >= 201703L || defined(_EXT_STD_SHARED_MUTEX_)
#define CXX_SHARED_MUTEX std::shared_mutex
#elif CXX_VER >= 201402L || defined(_EXT_STD_SHARED_TIMED_MUTEX_)
#define CXX_SHARED_MUTEX std::shared_timed_mutex
#endif

///
/// CXX_MUTEX
///
#if ((CXX_VER >= 201103L) ||                                                   \
     (defined(_MSC_VER) &&                                                     \
      (_MSC_VER >= 1700))) // >= Visual Studio 2012 version 11.0
#define CXX_MUTEX std::mutex
#endif

///
/// CXX_FOR, CXX_FOR_O, CXX_FOR_O_END
///  - Define a "range based for loop" macro
///
#if defined(__cpp_range_based_for)
#define CXX_FOR(range_declaration, range_expression)                           \
  for (range_declaration : (range_expression))
#else // !(defined(__cpp_range_based_for) && (CXX_VER >= __cpp_range_based_for))
#if defined(_MSC_VER) && (_MSC_VER >= 1400) // >= Visual Studio 2005 version 8.0
#define __CXX_FOR_ARG__(...) __VA_ARGS__
// clang-format off
#define CXX_FOR(range_declaration, range_expression)                           \
  for each (__CXX_FOR_ARG__(range_declaration) in range_expression)
// clang-format on
#endif //  >= Visual Studio 2005 version 8.0
#endif // !(defined(__cpp_range_based_for) && (CXX_VER >=
       // __cpp_range_based_for))

#define __CXX_FOR_ARG__(...) __VA_ARGS__
#define CXX_FOR_IT(range_declaration, iter_type, range_expression)             \
  for (__CXX_FOR_ARG__(iter_type) it = (range_expression).begin();             \
       it != (range_expression).end(); ++it) {                                 \
    __CXX_FOR_ARG__(range_declaration) = *it;
#define CXX_FOR_IT_END }

#if !defined(CXX_AUTO_TYPE_NOT_SUPPORTED)
#define CXX_FOR_O(range_declaration, range_expression)                         \
  for (auto it = (range_expression).begin(); it != (range_expression).end();   \
       ++it) {                                                                 \
    range_declaration = *it;
#define CXX_FOR_O_END }
#endif // !defined(CXX_AUTO_TYPE_NOT_SUPPORTED)

///
/// nullptr
///
#ifdef CXX_USE_NULLPTR
#ifndef _EXT_NULLPTR_
#define _EXT_NULLPTR_
const class nullptr_t {
public:
  template <class T> operator T *() const { return 0; }
  template <class C, class T> operator T C::*() const { return 0; }
} nullptr = {};
#endif // !_EXT_NULLPTR_
#endif // CXX_USE_NULLPTR

///
/// std::unique_ptr
///
#ifdef CXX_USE_STD_UNIQUE_PTR
#ifndef _EXT_STD_UNIQUE_PTR_
#define _EXT_STD_UNIQUE_PTR_
namespace std {
template <typename T> class unique_ptr {
public:
  unique_ptr &operator=(nullptr_t) {
    reset();
    return *this;
  }
  unique_ptr() : ptr_(nullptr) {}
  unique_ptr(T *ptr) : ptr_(ptr) {}
  ~unique_ptr() {
    if (ptr_)
      delete ptr_;
  }
  void reset(T *ptr = nullptr) {
    if (ptr_)
      delete ptr_;
    ptr_ = ptr;
  }
  operator bool() { return ptr_ != nullptr; }
  T &operator*() { return *ptr_; }
  T *operator->() { return ptr_; }

private:
  T *ptr_;
};
} // namespace std
#endif // !_EXT_STD_UNIQUE_PTR_
#endif

///
/// std::move
///
#ifdef CXX_STD_MOVE_NOT_SUPPORTED
#if defined(CXX_USE_STD_MAKE_UNIQUE) || defined(_EXT_STD_MAKE_UNIQUE_) ||      \
    defined(CXX_USE_STD_REMOVE) || defined(CXX_USE_STD_REMOVE_IF) ||           \
    defined(CXX_USE_STD_MAKE_SHARED) || defined(_EXT_STD_MAKE_SHARED_)
#define CXX_USE_STD_MOVE
#endif
#endif
#ifdef CXX_USE_STD_MOVE
#ifndef _EXT_STD_MOVE_
#define _EXT_STD_MOVE_
namespace ext {
template <typename T> struct movable : public T {};

#define primitive_move(type)                                                   \
  inline type &move(type &t) { return t; }

#define primitive_move2(type)                                                  \
  primitive_move(type);                                                        \
  inline unsigned type &move(unsigned type &t) { return t; }

primitive_move2(char);
primitive_move2(short);
primitive_move2(int);
primitive_move2(long);
primitive_move2(long long);
primitive_move(float);
primitive_move(double);
primitive_move(long double);

#ifdef _XSTRING_
inline std::string move(std::string &t) {
  std::string tmp;
  t.swap(tmp);
  return tmp;
}
#endif

#ifdef _VECTOR_
template <typename T> inline std::vector<T> move(std::vector<T> &t) {
  std::vector<T> tmp;
  t.swap(tmp);
  return tmp;
}
#endif

template <typename T> inline ext::movable<T> &move(T &val) {
  return static_cast<ext::movable<T> &>(val);
}
} // namespace ext
namespace std {
using ext::move;
} // namespace std
#endif // !_EXT_STD_MOVE_
#endif // CXX_USE_STD_MOVE

///
/// std::make_unique
///
#ifdef CXX_USE_STD_MAKE_UNIQUE
#ifndef _EXT_STD_MAKE_UNIQUE_
#define _EXT_STD_MAKE_UNIQUE_
#include <memory>
namespace std {
#ifdef __cpp_variadic_templates
template <typename T, typename... Args>
inline std::unique_ptr<T> make_unique(Args &&... __args) {
  return std::unique_ptr<T>(new T(std::forward<Args>(__args)...));
}
#else
template <typename T> inline std::unique_ptr<T> make_unique() {
  return std::unique_ptr<T>(new T());
}
template <typename T, typename A0>
inline std::unique_ptr<T> make_unique(const A0 &a0) {
  return std::unique_ptr<T>(new T(a0));
}
#endif // __cpp_variadic_templates
} // namespace std
#endif // !_EXT_STD_MAKE_UNIQUE_
#endif // CXX_USE_STD_MAKE_UNIQUE

#ifdef CXX_USE_STD_MAKE_SHARED
#ifndef _EXT_STD_MAKE_SHARED_
#define _EXT_STD_MAKE_SHARED_
#include <memory>
namespace std {
#ifdef __cpp_variadic_templates
template <typename T, typename... Args>
inline std::shared_ptr<T> make_shared(Args &&... __args) {
  return std::shared_ptr<T>(new T(std::forward<Args>(__args)...));
}
#else
template <typename T> inline std::shared_ptr<T> make_shared() {
  return std::shared_ptr<T>(new T());
}
template <typename T, typename A0>
inline std::shared_ptr<T> make_shared(const A0 &a0) {
  return std::shared_ptr<T>(new T(a0));
}
#endif // __cpp_variadic_templates
} // namespace std
#endif // !_EXT_STD_MAKE_SHARED_
#endif // CXX_USE_STD_MAKE_SHARED

///
/// std::byte
///
#ifdef CXX_USE_STD_BYTE
#ifndef _EXT_STD_BYTE_
#define _EXT_STD_BYTE_
namespace std {
enum byte : unsigned char {};

template <typename _IntType>
inline CXX_CONSTEXPR byte operator<<(const byte _Arg,
                                     const _IntType _Shift) CXX_NOEXCEPT {
  return static_cast<byte>(
      static_cast<unsigned char>(static_cast<unsigned int>(_Arg) << _Shift));
}

template <class _IntType>
inline CXX_CONSTEXPR byte operator>>(const byte _Arg,
                                     const _IntType _Shift) CXX_NOEXCEPT {
  return static_cast<byte>(
      static_cast<unsigned char>(static_cast<unsigned int>(_Arg) >> _Shift));
}

inline CXX_CONSTEXPR byte operator|(const byte _Left,
                                    const byte _Right) CXX_NOEXCEPT {
  return static_cast<byte>(static_cast<unsigned char>(
      static_cast<unsigned int>(_Left) | static_cast<unsigned int>(_Right)));
}

inline CXX_CONSTEXPR byte operator&(const byte _Left,
                                    const byte _Right) CXX_NOEXCEPT {
  return static_cast<byte>(static_cast<unsigned char>(
      static_cast<unsigned int>(_Left) & static_cast<unsigned int>(_Right)));
}

inline CXX_CONSTEXPR byte operator^(const byte _Left,
                                    const byte _Right) CXX_NOEXCEPT {
  return static_cast<byte>(static_cast<unsigned char>(
      static_cast<unsigned int>(_Left) ^ static_cast<unsigned int>(_Right)));
}

inline CXX_CONSTEXPR byte operator~(const byte _Arg) CXX_NOEXCEPT {
  return static_cast<byte>(
      static_cast<unsigned char>(~static_cast<unsigned int>(_Arg)));
}

template <class _IntType>
inline byte &operator<<=(byte &_Arg, const _IntType _Shift) CXX_NOEXCEPT {
  return _Arg = _Arg << _Shift;
}

template <class _IntType>
inline byte &operator>>=(byte &_Arg, const _IntType _Shift) CXX_NOEXCEPT {
  return _Arg = _Arg >> _Shift;
}

inline byte &operator|=(byte &_Left, const byte _Right) CXX_NOEXCEPT {
  return _Left = _Left | _Right;
}

inline byte &operator&=(byte &_Left, const byte _Right) CXX_NOEXCEPT {
  return _Left = _Left & _Right;
}

inline byte &operator^=(byte &_Left, const byte _Right) CXX_NOEXCEPT {
  return _Left = _Left ^ _Right;
}

template <class _IntType>
inline CXX_CONSTEXPR _IntType to_integer(const byte _Arg) CXX_NOEXCEPT {
  return static_cast<_IntType>(_Arg);
}
} // namespace std
#endif // !_EXT_STD_BYTE_
#endif // CXX_USE_STD_BYTE

///
/// std::remove
///
#ifdef CXX_USE_STD_REMOVE
#ifndef _EXT_STD_REMOVE_
#define _EXT_STD_REMOVE_
namespace std {
template <class ForwardIt, class T>
inline ForwardIt remove(ForwardIt first, ForwardIt last, const T &value) {
  first = std::find(first, last, value);
  if (first != last)
    for (ForwardIt i = first; ++i != last;)
      if (!(*i == value))
        *first++ = std::move(*i);
  return first;
}
} // namespace std
#endif // !_EXT_STD_REMOVE_
#endif // CXX_USE_STD_REMOVE

///
/// std::remove_if
///
#ifdef CXX_USE_STD_REMOVE_IF
#ifndef _EXT_STD_REMOVE_IF_
#define _EXT_STD_REMOVE_IF_
namespace std {
template <class ForwardIt, class UnaryPredicate>
inline ForwardIt remove_if(ForwardIt first, ForwardIt last, UnaryPredicate p) {
  first = std::find_if(first, last, p);
  if (first != last)
    for (ForwardIt i = first; ++i != last;)
      if (!p(*i))
        *first++ = std::move(*i);
  return first;
}
} // namespace std
#endif // !_EXT_STD_REMOVE_IF_
#endif // CXX_USE_STD_REMOVE_IF

///
/// std::apply
///
#ifdef CXX_USE_STD_APPLY
#ifndef _EXT_STD_APPLY_
#define _EXT_STD_APPLY_
#include <functional>
#include <tuple>

namespace std {
namespace detail {
template <int N> struct apply_wrap {
  template <class F, typename... Args, typename... UnpackedArgs>
  static CXX_INVOKE_RESULT(F, Args...)
      apply(F &&f, std::tuple<Args...> &&t, UnpackedArgs &&... args) {
    return apply_wrap<N - 1>::apply(f, std::forward<std::tuple<Args...>>(t),
                                    std::get<N - 1>(t),
                                    std::forward<UnpackedArgs>(args)...);
  }
};

template <> struct apply_wrap<0> {
  template <class F, typename... Args, typename... UnpackedArgs>
  static CXX_INVOKE_RESULT(F, Args...)
      apply(F &&f, std::tuple<Args...> &&, UnpackedArgs &&... args) {
    return f(std::forward<UnpackedArgs>(args)...);
  }
};
} // namespace detail
template <class F, typename... Args>
inline CXX_INVOKE_RESULT(F, Args...) apply(F &&f, std::tuple<Args...> &&t) {
  return detail::apply_wrap<sizeof...(Args)>::apply(
      std::forward<F>(f), std::forward<std::tuple<Args...>>(t));
}
template <class F, typename... Args>
inline CXX_INVOKE_RESULT(F, Args...) apply(F &&f, std::tuple<Args...> &t) {
  return detail::apply_wrap<sizeof...(Args)>::apply(
      std::forward<F>(f), std::forward<std::tuple<Args...>>(t));
}
} // namespace std
#endif // !_EXT_STD_APPLY_
#endif // CXX_USE_STD_APPLY

///
// std::integral_constant
//
#ifdef CXX_USE_STD_INTEGRAL_CONSTANT
#ifndef _EXT_STD_INTEGRAL_CONSTANT_
#define _EXT_STD_INTEGRAL_CONSTANT_
namespace std {
template <class T, T v> struct integral_constant {
  const static T value = v;
  typedef T value_type;
  typedef integral_constant type;
  operator value_type() const CXX_NOEXCEPT { return value; }

  // since c++14
  CXX_CONSTEXPR value_type operator()() const CXX_NOEXCEPT { return value; }
};
} // namespace std
#endif // !_EXT_STD_INTEGRAL_CONSTANT_
#endif // CXX_USE_STD_INTEGRAL_CONSTANT

///
// std::true_type
//
#ifdef CXX_USE_STD_TRUE_TYPE
#ifndef _EXT_STD_TRUE_TYPE_
#define _EXT_STD_TRUE_TYPE_
namespace std {
typedef integral_constant<bool, true> true_type;
} // namespace std
#endif // !_EXT_STD_TRUE_TYPE_
#endif // CXX_USE_STD_TRUE_TYPE

///
// std::false_type
//
#ifdef CXX_USE_STD_FALSE_TYPE
#ifndef _EXT_STD_FALSE_TYPE_
#define _EXT_STD_FALSE_TYPE_
namespace std {
typedef integral_constant<bool, false> false_type;
} // namespace std
#endif // !_EXT_STD_FALSE_TYPE_
#endif // CXX_USE_STD_FALSE_TYPE

#ifdef CXX_USE_STD_IS_REF
#ifndef _EXT_STD_IS_REF_
#define _EXT_STD_IS_REF_
namespace std {
template <class T> struct is_reference : std::false_type {};
template <class T> struct is_reference<T &> : std::true_type {};
} // namespace std
#endif // !_EXT_STD_IS_REF_
#endif // CXX_USE_STD_IS_REF

///
// std::is_same
//
#ifdef CXX_USE_STD_IS_SAME
#ifndef _EXT_STD_IS_SAME_
#define _EXT_STD_IS_SAME_
namespace std {
template <class T, class U> struct is_same : std::false_type {};
template <class T> struct is_same<T, T> : std::true_type {};
} // namespace std
#endif // !_EXT_STD_IS_SAME_
#endif // CXX_USE_STD_IS_SAME

///
// std::enable_if
//
#ifdef CXX_USE_STD_ENABLE_IF
#ifndef _EXT_STD_ENABLE_IF_
#define _EXT_STD_ENABLE_IF_
namespace std {
template <bool B, class T = void> struct enable_if {};
template <class T> struct enable_if<true, T> { typedef T type; };
} // namespace std
#endif // !_EXT_STD_ENABLE_IF_
#endif // CXX_USE_STD_ENABLE_IF

///
/// std::remove_cv
///
#ifdef CXX_USE_STD_REMOVE_CV
#ifndef _EXT_STD_REMOVE_CV_
#define _EXT_STD_REMOVE_CV_
#include <type_traits>
namespace std {
template <class T> struct remove_cv { typedef T type; };
template <class T> struct remove_cv<const T> { typedef T type; };
template <class T> struct remove_cv<volatile T> { typedef T type; };
template <class T> struct remove_cv<const volatile T> { typedef T type; };
} // namespace std
#endif // !_EXT_STD_REMOVE_CV_
#endif // CXX_USE_STD_REMOVE_CV

///
/// remove_cv_t
///
#ifdef CXX_USE_STD_REMOVE_CV_T
#ifndef _EXT_STD_REMOVE_CV_T_
#define _EXT_STD_REMOVE_CV_T_
#include <type_traits>
namespace std {
template <class T> using remove_cv_t = typename remove_cv<T>::type;
} // namespace std
#endif // !_EXT_STD_REMOVE_CV_T_
#endif // CXX_USE_STD_REMOVE_CV_T

///
/// std::remove_const
///
#ifdef CXX_USE_STD_REMOVE_CONST
#ifndef _EXT_STD_REMOVE_CONST_
#define _EXT_STD_REMOVE_CONST_
#include <type_traits>
namespace std {
template <class T> struct remove_const { typedef T type; };
template <class T> struct remove_const<const T> { typedef T type; };
} // namespace std
#endif // !_EXT_STD_REMOVE_CONST_
#endif // CXX_USE_STD_REMOVE_CONST

///
/// std::remove_reference
///
#ifdef CXX_USE_STD_REMOVE_REF
#ifndef _EXT_STD_REMOVE_REF_
#define _EXT_STD_REMOVE_REF_
#include <type_traits>
namespace std {
template <class T> struct remove_reference { typedef T type; };
template <class T> struct remove_reference<T &> { typedef T type; };
#ifdef __cpp_rvalue_references
template <class T> struct remove_reference < T && { typedef T type; };
#endif // __cpp_rvalue_references
} // namespace std
#endif // !_EXT_STD_REMOVE_REF_
#endif // CXX_USE_STD_REMOVE_REF

///
/// remove_reference_t
///
#ifdef CXX_USE_STD_REMOVE_REF_T
#ifndef _EXT_STD_REMOVE_REF_T_
#define _EXT_STD_REMOVE_REF_T_
#include <type_traits>
namespace std {
template <class T>
using remove_reference_t = typename remove_reference<T>::type;
} // namespace std
#endif // !_EXT_STD_REMOVE_REF_
#endif // CXX_USE_STD_REMOVE_REF_T

///
/// std::remove_cvref
///
#ifdef CXX_USE_STD_REMOVE_CVREF
#ifndef _EXT_STD_REMOVE_CVREF_
#define _EXT_STD_REMOVE_CVREF_
#include <type_traits>
namespace std {
template <class T> struct remove_cvref {
  typedef typename std::remove_cv<typename std::remove_reference<T>::type>::type
      type;
};
} // namespace std
#endif // !_EXT_STD_REMOVE_CVREF_
#endif // CXX_USE_STD_REMOVE_CVREF

///
///  std::remove_cvref_t
///
#ifdef CXX_USE_STD_REMOVE_CVREF_T
#ifndef _EXT_STD_REMOVE_CVREF_T_
#define _EXT_STD_REMOVE_CVREF_T_
#include <type_traits>
namespace std {
template <class T> using remove_cvref_t = typename remove_cvref<T>::type;
} // namespace std
#endif // !_EXT_STD_REMOVE_CVREF_T_
#endif // CXX_USE_STD_REMOVE_CVREF_T

//
//  std::void_t
//
#if defined(CXX_USE_STD_VOID_T)
#ifndef _EXT_STD_VOID_T_
#define _EXT_STD_VOID_T_
namespace std {
template <typename... Ts> struct make_void { typedef void type; };
template <typename... Ts> using void_t = typename make_void<Ts...>::type;
} // namespace std
#endif // _EXT_STD_VOID_T_
#endif // CXX_USE_STD_VOID_T

//
//  std::erase_if
//
#if defined(CXX_USE_STD_ERASE_IF)
#ifndef _EXT_STD_ERASE_IF_
#define _EXT_STD_ERASE_IF_
namespace std {
#if defined(CXX_AUTO_TYPE_NOT_SUPPORTED)
template <class Container, class UnaryPredicate>
inline typename Container::size_type erase_if(Container &c,
                                              UnaryPredicate pred) {
  Container::size_type old_size = c.size();
  for (Container::const_iterator i = c.begin(), last = c.end(); i != last;) {
    if (pred(*i)) {
      i = c.erase(i);
    } else {
      ++i;
    }
  }
  return old_size - c.size();
}
#else  // !defined(CXX_AUTO_TYPE_NOT_SUPPORTED)
template <class Container, class UnaryPredicate>
inline typename Container::size_type erase_if(Container &c,
                                              UnaryPredicate pred) {
  auto old_size = c.size();
  for (auto i = c.begin(), last = c.end(); i != last;) {
    if (pred(*i)) {
      i = c.erase(i);
    } else {
      ++i;
    }
  }
  return old_size - c.size();
}
#endif // !defined(CXX_AUTO_TYPE_NOT_SUPPORTED)
} // namespace std
#endif // _EXT_STD_ERASE_IF_
#endif // CXX_USE_STD_ERASE_IF

///
/// When use Boost
///
#if defined(_EXT_STD_ATOMIC_) && defined(CXX_STD_ATOMIC_NOT_SUPPORTED) &&      \
    defined(BOOST_ATOMIC_HPP)
#if !defined(CXX_STD_THREAD_NOT_SUPPORTED) || defined(_EXT_STD_THREAD_)
#ifndef _EXT_STD_ATOMIC_THREAD_ID_
#define _EXT_STD_ATOMIC_THREAD_ID_
inline bool operator==(std::atomic<std::thread::id> const &lhs,
                       std::atomic<std::thread::id> const &rhs) {
  return (static_cast<std::thread::id>(lhs) ==
          static_cast<std::thread::id>(rhs));
}
inline bool operator!=(std::atomic<std::thread::id> const &lhs,
                       std::atomic<std::thread::id> const &rhs) {
  return !(lhs == rhs);
}
#endif // !_EXT_STD_ATOMIC_THREAD_ID_
#endif // !defined(CXX_STD_THREAD_NOT_SUPPORTED) || defined(_EXT_STD_THREAD_)
#endif // defined(_EXT_STD_ATOMIC_) && defined(CXX_STD_ATOMIC_NOT_SUPPORTED) &&
       // defined(BOOST_ATOMIC_HPP)

//
// std::thread (no boost)
//
#if (!defined(_EXT_STD_THREAD_)) && defined(CXX_USE_STD_THREAD) &&             \
    defined(_MSC_VER) && (_MSC_VER < 1700)

#define _EXT_STD_THREAD_
#include <functional>

#define WIN32_LEAN_AND_MEAN
#define NOMINMAX
#include <windows.h>

namespace std {
class thread {
private:
  thread(const thread &) {}
  thread &operator=(const thread &) {}

public:
  typedef DWORD id;
  typedef HANDLE native_handle_type;

  static DWORD WINAPI thread_fn(LPVOID context) {
    reinterpret_cast<thread *>(context)->fn_();
    return 0;
  }

  thread(std::tr1::function<void()> fn) : fn_(fn) {
    handle_ = CreateThread(NULL, 0, thread_fn, (LPVOID)this, 0, &id_);
  }

  ~thread() CXX_NOEXCEPT {
    if (joinable())
      std::terminate();
  }

  void swap(thread &other) CXX_NOEXCEPT { std::swap(handle_, other.handle_); }

  bool joinable() const { return handle_ != NULL; }

  void join() {
    WaitForSingleObject(handle_, INFINITE);
    handle_ = NULL;
  }

  static unsigned int hardware_concurrency() CXX_NOEXCEPT {
    SYSTEM_INFO sys_info;
    GetSystemInfo(&sys_info);
    return sys_info.dwNumberOfProcessors;
  }

  void detach() {
    if (!joinable())
      throw std::invalid_argument("failed to detach");
    handle_ = 0;
  }

  DWORD get_id() const CXX_NOEXCEPT { return id_; }

  native_handle_type native_handle() { return handle_; }

private:
  DWORD id_;
  HANDLE handle_;
  std::function<void()> fn_;
};
} // namespace std
#endif // (!defined(_EXT_STD_THREAD_)) && defined(CXX_USE_STD_THREAD) &&
       // defined(_MSC_VER) && (_MSC_VER < 1700)

#if defined(_STRING_) && defined(_MSC_VER) && (_MSC_VER == 1600)
#ifndef _EXT_STD_TO_STRING_
#define _EXT_STD_TO_STRING_
namespace std {
inline std::string to_string(_W64 unsigned int val) {
  return std::to_string(static_cast<_ULonglong>(val));
}
inline std::string to_string(_W64 int val) {
  return std::to_string(static_cast<_Longlong>(val));
}
inline std::wstring to_wstring(_W64 unsigned int val) {
  return std::to_wstring(static_cast<_ULonglong>(val));
}
inline std::wstring to_wstring(_W64 int val) {
  return std::to_wstring(static_cast<_Longlong>(val));
}
} // namespace std
#endif // !_EXT_STD_TO_STRING_
#endif // defined(_MSC_VER) && (_MSC_VER == 1600)

#if defined(_STRING_) && defined(_MSC_VER) && (_MSC_VER < 1600)
#ifndef _EXT_STD_TO_STRING_
#define _EXT_STD_TO_STRING_
namespace std {
template <class _Ty>
inline std::string _Floating_to_string(const char *_Fmt, _Ty _Val) {
  const int _Len = static_cast<size_t>(_CSTD _scprintf(_Fmt, _Val));
  std::string _Str(_Len, '\0');
  _CSTD sprintf_s(&_Str[0], _Len + 1, _Fmt, _Val);
  return (_Str);
}
inline std::string to_string(float _Val) {
  return (_Floating_to_string("%f", _Val));
}

inline std::string to_string(double _Val) {
  return (_Floating_to_string("%f", _Val));
}

inline std::string to_string(long double _Val) {
  return (_Floating_to_string("%Lf", _Val));
}

inline std::string to_string(long long _Val) {
  char buffer[21] = {
      0,
  };
  _ltoa_s((long)_Val, buffer, 10);
  return std::string(buffer);
}

inline std::string to_string(long _Val) {
  char buffer[21] = {
      0,
  };
  _ltoa_s(_Val, buffer, 10);
  return std::string(buffer);
}
inline std::string to_string(unsigned long long _Val) {
  char buffer[21] = {
      0,
  };
  _ultoa_s((unsigned long)_Val, buffer, 10);
  return std::string(buffer);
}

inline std::string to_string(unsigned long _Val) {
  char buffer[21] = {
      0,
  };
  _ultoa_s(_Val, buffer, 10);
  return std::string(buffer);
}

inline std::string to_string(size_t val) {
  return std::to_string(static_cast<unsigned long long>(val));
}

template <class _Ty>
inline std::wstring _Floating_to_wstring(const wchar_t *_Fmt, _Ty _Val) {
  const int _Len = static_cast<size_t>(_CSTD _scwprintf(_Fmt, _Val));
  std::wstring _Str(_Len, L'\0');
  swprintf_s(&_Str[0], _Len + 1, _Fmt, _Val);
  return (_Str);
}

inline std::wstring to_wstring(float _Val) {
  return (_Floating_to_wstring(L"%f", _Val));
}

inline std::wstring to_wstring(double _Val) {
  return (_Floating_to_wstring(L"%f", _Val));
}

inline std::wstring to_wstring(long double _Val) {
  return (_Floating_to_wstring(L"%Lf", _Val));
}

inline std::wstring to_wstring(long _Val) {
  wchar_t buffer[21] = {
      0,
  };
  _ltow_s(_Val, buffer, 10);
  return std::wstring(buffer);
}

inline std::wstring to_wstring(long long _Val) {
  wchar_t buffer[21] = {
      0,
  };
  _ltow_s((long)_Val, buffer, 10);
  return std::wstring(buffer);
}

inline std::wstring to_wstring(unsigned long long _Val) {
  wchar_t buffer[21] = {
      0,
  };
  _ultow_s((unsigned long)_Val, buffer, 10);
  return std::wstring(buffer);
}

inline std::wstring to_wstring(unsigned long _Val) {
  wchar_t buffer[21] = {
      0,
  };
  _ultow_s(_Val, buffer, 10);
  return std::wstring(buffer);
}

inline std::wstring to_wstring(size_t val) {
  return std::to_wstring(static_cast<unsigned long long>(val));
}
} // namespace std
#endif // !_EXT_STD_TO_STRING_

#ifndef _EXT_STD_STOUL_
#define _EXT_STD_STOUL_
#include <errno.h>
#include <limits.h>
#include <limits>
#include <locale>
#include <stdexcept>
#include <stdlib.h>

namespace std {
inline unsigned long stoul(const std::string &str, std::size_t *pos = 0,
                           int base = 10) {
  int &e = errno;
  const char *ptr = str.c_str();
  char *end;
  e = 0;
  const unsigned long ret = strtoul(ptr, &end, base);

  if (ptr == end)
    throw std::invalid_argument("invalid stoul argument");
  if (e == ERANGE)
    throw std::out_of_range("stoul argument out of range");
  if (pos)
    *pos = (size_t)(end - ptr);
  return ret;
}

inline unsigned long stoul(const std::wstring &str, std::size_t *pos = 0,
                           int base = 10) {
  int &e = errno;
  const wchar_t *ptr = str.c_str();
  wchar_t *end;
  e = 0;
  const unsigned long ret = wcstoul(ptr, &end, base);

  if (ptr == end)
    throw std::invalid_argument("invalid stoul argument");
  if (e == ERANGE)
    throw std::out_of_range("stoul argument out of range");
  if (pos)
    *pos = (size_t)(end - ptr);
  return ret;
}

template <typename T, typename N>
inline N basic_stoull(const std::basic_string<T> &str, std::size_t *pos = 0,
                      int base = 10) {
  if (base == 1 || base < 0 || base > 36) {
    throw std::invalid_argument("invalid stoul argument (base)");
    return std::numeric_limits<N>::max();
  }

  errno = 0;
  const T *begin = str.c_str();

  const T *s = begin;
  T c;
  do {
    c = *s++;
  } while (std::isspace<T>(c, std::locale::classic()));

  bool negative = c == (T)'-';
  if (negative || (c == (T)'+'))
    c = *s++;

  if ((base == 0 || base == 16) && c == (T)'0' && ((*s | 0x20) == (T)'x')) {
    c = s[1];
    s += 2;
    base = 16;
  }
  if (base == 0)
    base = (c == (T)'0') ? 8 : 10;

  const N last_offset = std::numeric_limits<N>::max() / static_cast<N>(base);
  const N base_max = std::numeric_limits<N>::max() % static_cast<N>(base);

  N ret = 0;
  const T *inital_s = s;
  for (;;) {
    if (c >= (T)'0' && c <= (T)'9') {
      c -= (T)'0';
    } else {
      c |= (T)0x20;
      if (c >= (T)'a' && c <= (T)'z')
        c -= (T)('a' - 10);
      else
        break;
    }

    if (c >= base)
      break;

    if (ret > last_offset || (ret == last_offset && c > base_max)) {
      errno = ERANGE;
      throw std::out_of_range("stoul argument stoull of range");
      return std::numeric_limits<N>::max();
    }

    ret *= base;
    ret += c;
    c = *s++;
  }

  if (inital_s == s) {
    throw std::invalid_argument("invalid argument");
    return std::numeric_limits<N>::max();
  }

  if (pos)
    *pos = (size_t)((s - 1) - begin);

  return (negative) ? ~ret + 1 : ret;
}

inline unsigned long long stoull(const std::string &str, std::size_t *pos = 0,
                                 int base = 10) {
  return basic_stoull<char, unsigned long long>(str, pos, base);
}

inline unsigned long long stoull(const std::wstring &str, std::size_t *pos = 0,
                                 int base = 10) {
  return basic_stoull<wchar_t, unsigned long long>(str, pos, base);
}
} // namespace std
#endif // !_EXT_STD_STOUL_
#endif // defined(_STRING_) && defined(_MSC_VER) && (_MSC_VER < 1600)