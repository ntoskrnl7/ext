/**
 * @file string
 * @author Jung-kang Lee (ntoskrnl7@gmail.com)
 * @brief This module implements string helper features.
 *
 * CXX_USE_STD_U8STRING
 *
 * @copyright Copyright (c) 2020 C++ Extended template library Authors
 *
 */
#pragma once

#ifndef _EXT_STRING_
#define _EXT_STRING_

#include <algorithm>
#include <ctype.h>
#include <functional>
#include <locale>
#include <string>
#include <vector>

#define CXX_USE_STD_MOVE
#define CXX_USE_STD_IS_SAME
#include "stl_compat"

#if (!defined(CXX_STD_U8STRING_NOT_SUPPORTED)) && defined(CXX_USE_STD_U8STRING)
#undef CXX_USE_STD_U8STRING
#endif //  (!defined(CXX_STD_U8STRING_NOT_SUPPORTED)) &&
       //  defined(CXX_USE_STD_U8STRING)

#if defined(CXX_STD_U8STRING_NOT_SUPPORTED) &&                                 \
    defined(CXX_USE_STD_U8STRING) && (!defined(__cpp_lib_char8_t))
typedef unsigned char char8_t;
namespace ext {
typedef std::basic_string<char8_t> u8string;
}
#endif // defined(CXX_STD_U8STRING_NOT_SUPPORTED) &&
       // defined(CXX_USE_STD_U8STRING) && (!defined(__cpp_lib_char8_t))

namespace ext {
namespace string {

namespace movable {

#if defined(_EXT_STD_MOVE_) && defined(EXT_USE_STRING_MOVABLE)
template <typename T> class basic_string : public std::basic_string<T> {
private:
  typedef std::basic_string<T> string_type;

public:
  basic_string(const T *ptr) : string_type(ptr) {}
  basic_string(size_t size, const T ch) : string_type(size, ch) {}
  basic_string(const string_type &s) : string_type(s) {}
  basic_string(const std::allocator<T> &ai) : string_type(ai) {}
  basic_string(const typename string_type::iterator &first,
               const typename string_type::iterator &last)
      : string_type(first, last) {}

public:
  basic_string(ext::movable<basic_string> &other) {
    swap(other);
    other.clear();
  }
  basic_string &operator=(ext::movable<basic_string> &rhs) {
    swap(rhs);
    rhs.clear();
    return *this;
  }
};

typedef basic_string<char> string;
typedef basic_string<wchar_t> wstring;
#else  // !(defined(_EXT_STD_MOVE_) && defined(EXT_USE_STRING_MOVABLE))
typedef std::basic_string<char> string;
typedef std::basic_string<wchar_t> wstring;
#endif // !(defined(_EXT_STD_MOVE_) && defined(EXT_USE_STRING_MOVABLE))
} // namespace movable

namespace internal {
template <typename T> inline const std::basic_string<T> trim_str();
template <> inline const std::string trim_str<char>() {
  return std::string(" \t\n\r\f\v\0", sizeof(" \t\n\r\f\v\0") - 1);
}
template <> inline const std::wstring trim_str<wchar_t>() {
  return std::wstring(L" \t\n\r\f\v\0",
                      (sizeof(" \t\n\r\f\v\0") / sizeof(wchar_t)) - 1);
}
} // namespace internal

//
// printable functions.
//

template <typename T>
inline std::basic_string<T> &rprintable(std::basic_string<T> &s) {
  s.erase(std::find_if(s.rbegin(), s.rend(), isprint).base(), s.end());
  return s;
}

template <typename T>
inline std::basic_string<T> &lprintable(std::basic_string<T> &s) {
  s.erase(s.begin(), std::find_if(s.begin(), s.end(), isprint));
  return s;
}

#if defined(__cpp_lambdas)
template <typename T>
inline std::basic_string<T> &printable(std::basic_string<T> &s) {
  s.erase(std::remove_if(s.begin(), s.end(), [](T ch) { return !isprint(ch); }),
          s.end());
  return s;
}
#else
template <typename T> bool is_not_print(T ch) { return !isprint(ch); }

template <typename T>
inline std::basic_string<T> &printable(std::basic_string<T> &s) {
  s.erase(std::remove_if(s.begin(), s.end(), is_not_print<T>), s.end());
  return s;
}
#endif

#if (!defined(_MSC_VER)) || (defined(_MSC_VER) && _MSC_VER > 1600)
template <typename T>
inline std::basic_string<T> rprintable(const std::basic_string<T> &s) {
  std::basic_string<T> val = s;
  return std::move(rprintable<T>(val));
}

template <typename T>
inline std::basic_string<T> lprintable(const std::basic_string<T> &s) {
  std::basic_string<T> val = s;
  return std::move(lprintable<T>(val));
}

template <typename T>
inline std::basic_string<T> printable(const std::basic_string<T> &s) {
  std::basic_string<T> val = s;
  return std::move(lprintable<T>(rprintable<T>(val)));
}
#endif

template <typename T> inline std::basic_string<T> rprintable(const T *s) {
  std::basic_string<T> ss(s);
  return std::move(rprintable(ss));
}

template <typename T> inline std::basic_string<T> lprintable(const T *s) {
  std::basic_string<T> ss(s);
  return std::move(lprintable(ss));
}

template <typename T> inline std::basic_string<T> printable(const T *s) {
  std::basic_string<T> ss(s);
  return std::move(printable(ss));
}

//
// trim functions.
//

template <typename T>
inline std::basic_string<T> &rtrim(std::basic_string<T> &s) {
  return s.erase(s.find_last_not_of(internal::trim_str<T>()) + 1);
}

template <typename T>
inline std::basic_string<T> &ltrim(std::basic_string<T> &s) {
  return s.erase(0, s.find_first_not_of(internal::trim_str<T>()));
}

template <typename T>
inline std::basic_string<T> &trim(std::basic_string<T> &s) {
  return ltrim<T>(rtrim<T>(s));
}

#if (!defined(_MSC_VER)) || (defined(_MSC_VER) && _MSC_VER > 1600)
template <typename T>
inline std::basic_string<T> rtrim(const std::basic_string<T> &s) {
  std::basic_string<T> val = s;
  return std::move(rtrim<T>(val));
}

template <typename T>
inline std::basic_string<T> ltrim(const std::basic_string<T> &s) {
  std::basic_string<T> val = s;
  return std::move(ltrim<T>(val));
}

template <typename T>
inline std::basic_string<T> trim(const std::basic_string<T> &s) {
  std::basic_string<T> val = s;
  return std::move(ltrim<T>(rtrim<T>(val)));
}
#endif

template <typename T> inline std::basic_string<T> rtrim(const T *s) {
  std::basic_string<T> ss(s);
  return std::move(rtrim(ss));
}

template <typename T> inline std::basic_string<T> ltrim(const T *s) {
  std::basic_string<T> ss(s);
  return std::move(ltrim(ss));
}

template <typename T> inline std::basic_string<T> trim(const T *s) {
  std::basic_string<T> ss(s);
  return std::move(trim(ss));
}

#ifdef __cpp_rvalue_references
template <typename T>
inline std::basic_string<T> rtrim(std::basic_string<T> &&s) {
  return std::move(rtrim(s));
}

template <typename T>
inline std::basic_string<T> ltrim(std::basic_string<T> &&s) {
  return std::move(ltrim(s));
}

template <typename T>
inline std::basic_string<T> trim(std::basic_string<T> &&s) {
  return std::move(trim<T>(s));
}
#endif // __cpp_rvalue_references

template <typename T> inline bool compare_char(T char1, T char2) {
  return char1 == char2;
}

template <typename T> inline bool compare_char_i(T char1, T char2) {
  if (isascii(char1) && isascii(char2) && isalpha(char1) && isalpha(char2))
    return tolower(char1) == tolower(char2);
  else
    return char1 == char2;
}

//
//  search functions.
//
namespace internal {
template <typename T, typename _Iterator>
inline _Iterator search(const _Iterator &begin, const _Iterator &end,
                        const std::basic_string<T> &s_str,
                        bool case_sensitive = false) {
#ifdef __cpp_lib_boyer_moore_searcher
  if (case_sensitive)
    return std::search(begin, end,
                       std::boyer_moore_searcher(s_str.begin(), s_str.end()));
  return std::search(begin, end, s_str.begin(), s_str.end(),
                     case_sensitive ? compare_char<T> : compare_char_i<T>);
#else
  return std::search(begin, end, s_str.begin(), s_str.end(),
                     case_sensitive ? compare_char<T> : compare_char_i<T>);
#endif
}
} // namespace internal

template <typename T>
inline bool search(const std::basic_string<T> &str,
                   const std::basic_string<T> &s_str,
                   bool case_sensitive = false) {
  return internal::search(str.begin(), str.end(), s_str, case_sensitive) !=
         str.end();
}

template <typename T>
inline bool search(const T *str, const T *s_str, bool case_sensitive = false) {
  return search(std::basic_string<T>(str), std::basic_string<T>(s_str),
                case_sensitive);
}

template <typename T>
inline bool search(const T *str, const std::basic_string<T> &s_str,
                   bool case_sensitive = false) {
  return search(std::basic_string<T>(str), s_str, case_sensitive);
}

template <typename T>
inline bool search(const std::basic_string<T> &str, const T *s_str,
                   bool case_sensitive = false) {
  return search(str, std::basic_string<T>(s_str), case_sensitive);
}

//
// starts_with
//
template <typename T>
inline bool starts_with(const std::basic_string<T> &str,
                        const std::basic_string<T> &prefix,
                        bool case_sensitive = false) {

  if (str.size() < prefix.size()) {
    return false;
  }
  if (case_sensitive)
    return ((prefix.size() <= str.size()) &&
            std::equal(prefix.begin(), prefix.end(), str.begin()));
  else
    return ((prefix.size() <= str.size()) &&
            std::equal(prefix.begin(), prefix.end(), str.begin(),
                       ext::string::compare_char_i<T>));
}

template <typename T>
inline bool starts_with(const T *str, const T *prefix,
                        bool case_sensitive = false) {
  return starts_with(std::basic_string<T>(str), std::basic_string<T>(prefix),
                     case_sensitive);
}

template <typename T>
inline bool starts_with(const T *str, const std::basic_string<T> &prefix,
                        bool case_sensitive = false) {
  return starts_with(std::basic_string<T>(str), prefix, case_sensitive);
}

template <typename T>
inline bool starts_with(const std::basic_string<T> &str, const T *prefix,
                        bool case_sensitive = false) {
  return starts_with(str, std::basic_string<T>(prefix), case_sensitive);
}

//
//  equal functions.
//

template <typename T, class _InIt1>
inline bool equal(const _InIt1 &_First1, const _InIt1 &_Last1,
                  const std::basic_string<T> &str2,
                  bool case_sensitive = false) {

  return std::equal(_First1, _Last1, str2.begin(),
                    case_sensitive ? compare_char<T> : compare_char_i<T>);
}

template <typename T>
inline bool equal(const std::basic_string<T> &str1,
                  const std::basic_string<T> &str2,
                  bool case_sensitive = false) {
  if (str1.size() != str2.size()) {
    return false;
  }

  return equal(str1.begin(), str1.end(), str2, case_sensitive);
}

template <typename T>
inline bool equal(const T *str1, const T *str2, bool case_sensitive = false) {
  const std::basic_string<T> text1 = str1;
  const std::basic_string<T> text2 = str2;

  if (text1.size() != text2.size())
    return false;

  return equal(text1.begin(), text1.end(), text2, case_sensitive);
}

template <typename T>
inline bool equal(const T *str1, const std::basic_string<T> &str2,
                  bool case_sensitive = false) {
  const std::basic_string<T> text1 = str1;

  if (text1.size() != str2.size())
    return false;

  return equal(text1.begin(), text1.end(), str2, case_sensitive);
}

template <typename T>
inline bool equal(const std::basic_string<T> &str1, const T *str2,
                  bool case_sensitive = false) {
  const std::basic_string<T> text2 = str2;

  if (str1.size() != text2.size())
    return false;

  return equal(str1.begin(), str1.end(), text2, case_sensitive);
}

//
//  replace_all functions.
//

template <typename T>
inline std::basic_string<T> &
replace_all(std::basic_string<T> &str, const std::basic_string<T> &old_str,
            const std::basic_string<T> &new_str, bool case_sensitive = false) {
  if (old_str.empty())
    return str;

  typename std::basic_string<T>::iterator it = str.begin();
  do {
    it = internal::search(it, str.end(), old_str, case_sensitive);
    if (it != str.end()) {
      typename std::basic_string<T>::size_type pos =
          std::distance(str.begin(), it);
      str.replace(it, it + old_str.length(), new_str);
      it = str.begin() + pos + new_str.length();
    }
  } while (it != str.end());

  return str;
}

template <typename T>
inline std::basic_string<T> &replace_all(std::basic_string<T> &str,
                                         const T *old_str, const T *new_str,
                                         bool case_sensitive = false) {
  return replace_all(str, std::basic_string<T>(old_str),
                     std::basic_string<T>(new_str), case_sensitive);
}

template <typename T>
inline std::basic_string<T> &
replace_all(std::basic_string<T> &str, const T *old_str,
            const std::basic_string<T> &new_str, bool case_sensitive = false) {
  return replace_all(str, std::basic_string<T>(old_str), new_str,
                     case_sensitive);
}

template <typename T>
inline std::basic_string<T> &
replace_all(std::basic_string<T> &str, const std::basic_string<T> &old_str,
            const T *new_str, bool case_sensitive = false) {
  return replace_all(str, old_str, std::basic_string<T>(new_str),
                     case_sensitive);
}

template <typename T>
inline std::basic_string<T> replace_all(const std::basic_string<T> &str,
                                        const T *old_str, const T *new_str,
                                        bool case_sensitive = false) {
  std::string val = str;
  return replace_all(val, std::basic_string<T>(old_str),
                     std::basic_string<T>(new_str), case_sensitive);
}

template <typename T>
inline std::vector<T> split(const std::string &str, const std::string &delim,
                            std::function<T(const std::string &)> fn) {
  std::vector<T> tokens;
  size_t prev = 0, pos = 0;
  do {
    pos = str.find(delim, prev);
    if (pos == std::string::npos)
      pos = str.length();
    std::string token = str.substr(prev, pos - prev);
    if (!token.empty())
      tokens.push_back(fn(token));
    prev = pos + delim.length();
  } while (pos < str.length() && prev < str.length());
  return tokens;
}

inline std::vector<std::string> split(const std::string &str,
                                      const std::string &delim) {
  std::vector<std::string> tokens;
  size_t prev = 0, pos = 0;
  do {
    pos = str.find(delim, prev);
    if (pos == std::string::npos)
      pos = str.length();
    std::string token = str.substr(prev, pos - prev);
    if (!token.empty())
      tokens.push_back(token);
    prev = pos + delim.length();
  } while (pos < str.length() && prev < str.length());
  return tokens;
}

template <typename T> T back(const std::basic_string<T> str) {
  if (str.empty())
    return (T)0;
#if CXX_VER < 201103L
  return str[str.size() - 1];
#else
  return str.back();
#endif
}

inline bool convert(const std::wstring &src, std::string &dst,
                    const std::locale locale = std::locale("")) {
  typedef std::codecvt<wchar_t, char, std::mbstate_t> codecvt_wchar;

  const codecvt_wchar &convert = std::use_facet<codecvt_wchar>(locale);
  std::mbstate_t state = std::mbstate_t();
  const size_t src_length = src.length();
  if (src_length == 0) {
    dst.resize(0);
    return true;
  }
  const wchar_t *src_next = src.c_str();
  const size_t dst_length =
      src_length * convert.max_length() + convert.max_length();
  std::vector<char> dst_vec(dst_length);
  char *dst_next = &dst_vec[0];
  if (convert.out(state, src.c_str(), &src[src_length], src_next, &dst_vec[0],
                  &dst_vec[dst_length - 1], dst_next) == codecvt_wchar::ok) {
    dst = std::move(std::basic_string<char>(&dst_vec[0], dst_next));
    return true;
  }
  return false;
}

inline bool convert(const std::string &src, std::wstring &dst,
                    const std::locale locale = std::locale("")) {
  typedef std::codecvt<wchar_t, char, std::mbstate_t> codecvt_wchar;

  const codecvt_wchar &convert = std::use_facet<codecvt_wchar>(locale);
  std::mbstate_t state = std::mbstate_t();
  const size_t src_length = src.length();
  if (src_length == 0) {
    dst.resize(0);
    return true;
  }
  const char *src_next = src.c_str();
  const size_t dst_length =
      src_length * convert.max_length() + convert.max_length();
  std::vector<wchar_t> dst_vec(dst_length);
  wchar_t *dst_next = &dst_vec[0];
  if (convert.in(state, src.c_str(), &src[src_length], src_next, &dst_vec[0],
                 &dst_vec[dst_length - 1], dst_next) == codecvt_wchar::ok) {
    dst = std::move(std::basic_string<wchar_t>(&dst_vec[0], dst_next));
    return true;
  }
  return false;
}

template <typename DST_T, typename SRC_T>
std::basic_string<DST_T> convert(const std::basic_string<SRC_T> &src,
                                 const std::locale Locale = std::locale("")) {
  std::basic_string<DST_T> dst;

  if (convert(src, dst, Locale)) {
    return dst;
  }
#ifdef __cpp_exceptions
  throw std::runtime_error("Failed to convert :-(");
#endif
  return std::basic_string<DST_T>();
}

inline std::wstring operator!(const std::string &rhs) {
  return convert<wchar_t>(rhs);
}

inline std::string operator!(const std::wstring &rhs) {
  return convert<char>(rhs);
}
} // namespace string
using namespace string;
} // namespace ext

#if defined(CXX_STD_U8STRING_NOT_SUPPORTED) &&                                 \
    defined(CXX_USE_STD_U8STRING) && (!defined(__cpp_lib_char8_t))
namespace std {
using ext::u8string;
} // namespace std
#endif // defined(CXX_STD_U8STRING_NOT_SUPPORTED) &&
       // defined(CXX_USE_STD_U8STRING) && (!defined(__cpp_lib_char8_t))

#if (!defined(CXX_STD_U8STRING_NOT_SUPPORTED)) ||                              \
    defined(CXX_USE_STD_U8STRING) || defined(__cpp_lib_char8_t)
namespace ext {
inline std::u8string from_u8(const std::string &u8_str) {
#if CXX_VER < 201103L
  return reinterpret_cast<const std::u8string::value_type *>(u8_str.c_str());
#else
  return reinterpret_cast<const typename std::u8string::value_type *>(
      u8_str.c_str());
#endif
}
inline std::u8string from_u8(const std::u8string &u8_str) { return u8_str; }

template <typename T>
inline bool from_u8string(const std::u8string &src, std::basic_string<T> &dst,
                          bool ignore_errors = true);

template <>
inline bool from_u8string<wchar_t>(const std::u8string &src, std::wstring &dst,
                                   bool ignore_errors) {
  dst.clear();
  wchar_t w = 0;
  int bytes = 0;
  wchar_t err = L'�';
  for (size_t i = 0; i < src.size(); i++) {
    unsigned char c = (unsigned char)src[i];
    if (c <= 0x7f) {
      if (bytes) {
        dst.push_back(err);
        bytes = 0;
      }
      dst.push_back((wchar_t)c);
    } else if (c <= 0xbf) {
      if (bytes) {
        w = ((w << 6) | (c & 0x3f));
        bytes--;
        if (bytes == 0)
          dst.push_back(w);
      } else
        dst.push_back(err);
    } else if (c <= 0xdf) {
      bytes = 1;
      w = c & 0x1f;
    } else if (c <= 0xef) {
      bytes = 2;
      w = c & 0x0f;
    } else if (c <= 0xf7) {
      bytes = 3;
      w = c & 0x07;
    } else {
      dst.push_back(err);
      bytes = 0;
    }
  }
  if (bytes)
    dst.push_back(err);
  return true;
}

template <>
inline bool from_u8string<char>(const std::u8string &src, std::string &dst,
                                bool ignore_errors) {
  std::wstring wstr;
  if (!from_u8string(src, wstr))
    return false;
  std::string str = !wstr;
  dst.swap(str);
  return true;
}

template <typename T>
inline std::basic_string<T> from_u8string(const std::u8string &src) {
  std::basic_string<T> ret;
  if (from_u8string<T>(src, ret))
    return std::move(ret);
#ifdef __cpp_exceptions
  throw std::runtime_error("Failed to from_u8string :-(");
#else
  return std::basic_string<T>();
#endif
}

inline bool to_u8string(const std::wstring &src, std::u8string &dst,
                        bool ignore_errors = true) {
  dst.clear();
  CXX_FOR(const wchar_t &w, src) {
    if (w <= 0x7f)
      dst.push_back((char)w);
    else if (w <= 0x7ff) {
      dst.push_back(0xc0 | ((w >> 6) & 0x1f));
      dst.push_back(0x80 | (w & 0x3f));
    } else if (w <= 0xffff) {
      dst.push_back(0xe0 | ((w >> 12) & 0x0f));
      dst.push_back(0x80 | ((w >> 6) & 0x3f));
      dst.push_back(0x80 | (w & 0x3f));
#if WCHAR_MAX > 0x0000ffff
    } else if (w <= 0x10ffff) {
      dst.push_back(0xf0 | ((w >> 18) & 0x07));
      dst.push_back(0x80 | ((w >> 12) & 0x3f));
      dst.push_back(0x80 | ((w >> 6) & 0x3f));
      dst.push_back(0x80 | (w & 0x3f));
#endif // WCHAR_MAX > UINT16_MAX
    } else if (ignore_errors) {
      dst.push_back('?');
    } else {
      return false;
    }
  }
  return true;
}

inline std::u8string to_u8string(const std::wstring &src) {
  std::u8string ret;
  if (to_u8string(src, ret))
    return std::move(ret);
#ifdef __cpp_exceptions
  throw std::runtime_error("Failed to to_u8string :-(");
#else
  return std::u8string();
#endif
}

inline std::u8string to_u8string(const std::string &src) {
  std::wstring wstr = !src;
  return to_u8string(wstr);
}
} // namespace ext
#define _EXT_U8STRING_
#endif //(!defined(CXX_STD_U8STRING_NOT_SUPPORTED)) ||
       // defined(CXX_USE_STD_U8STRING) || defined(__cpp_lib_char8_t)
#endif // _EXT_STRING_